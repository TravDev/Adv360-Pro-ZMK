/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

   //////////////////////////////////////////////////////////////////////////
    //
    // Miryoku layers and home row mods (ported from my QMK endgame)
    // - https://sunaku.github.io/home-row-mods.html#porting-to-zmk
    // - https://github.com/urob/zmk-config#timeless-homerow-mods
    //
    //////////////////////////////////////////////////////////////////////////

    //
    // DIFFICULTY_LEVEL specifies your level of expertise with this keymap.
    // It's meant to help newcomers gradually work their way up to mastery.
    // You can disable this setting by omitting it or assigning a `0` zero.
    //
    // #define DIFFICULTY_LEVEL 0 // custom (see defaults below)
    // #define DIFFICULTY_LEVEL 1 // novice (500ms)
    // #define DIFFICULTY_LEVEL 2 // slower (400ms)
    // #define DIFFICULTY_LEVEL 3 // normal (300ms)
    // #define DIFFICULTY_LEVEL 4 // faster (200ms)
    // #define DIFFICULTY_LEVEL 5 // expert (100ms)
    //
    #if defined(DIFFICULTY_LEVEL) && DIFFICULTY_LEVEL > 0
    #define DIFFICULTY_LEVEL_HOLDING_TIME  ((6 - DIFFICULTY_LEVEL) * 100)
    #define DIFFICULTY_LEVEL_STREAK_DECAY (((6 - DIFFICULTY_LEVEL) *  50) + 100)
    #ifndef HOMEY_HOLDING_TIME
    #define HOMEY_HOLDING_TIME DIFFICULTY_LEVEL_HOLDING_TIME
    #endif
    #ifndef HOMEY_STREAK_DECAY
    #define HOMEY_STREAK_DECAY DIFFICULTY_LEVEL_STREAK_DECAY
    #endif
    #ifndef INDEX_HOLDING_TIME
    #define INDEX_HOLDING_TIME DIFFICULTY_LEVEL_HOLDING_TIME
    #endif
    #ifndef INDEX_STREAK_DECAY
    #define INDEX_STREAK_DECAY DIFFICULTY_LEVEL_STREAK_DECAY
    #endif
    #ifndef PLAIN_HOLDING_TIME
    #define PLAIN_HOLDING_TIME DIFFICULTY_LEVEL_HOLDING_TIME
    #endif
    #ifndef PLAIN_STREAK_DECAY
    #define PLAIN_STREAK_DECAY DIFFICULTY_LEVEL_STREAK_DECAY
    #endif
    #ifndef SPACE_HOLDING_TIME
    #define SPACE_HOLDING_TIME DIFFICULTY_LEVEL_HOLDING_TIME
    #endif
    #ifndef SPACE_STREAK_DECAY
    #define SPACE_STREAK_DECAY DIFFICULTY_LEVEL_STREAK_DECAY
    #endif
    #endif

    //
    // ENFORCE_BILATERAL cancels out single-handed home row mods activation by
    // releasing any currently pressed mods and replacing them with plain taps.
    //
    // NOTE: You may still encounter "flashing mods" where an operating system
    // action is triggered by the release of mods, such as LGUI which launches
    // the Windows Start Menu and LALT which opens the Microsoft Office Ribbon.
    //
    //#define ENFORCE_BILATERAL

    //
    // The *_FINGER_MOD specify which modifiers are used by home row mod keys.
    // Here, we use Miryoku's "GACS" (Win, Alt, Ctrl, Shift) order by default,
    // unless OPERATING_SYSTEM is macOS, in which case Win & Ctrl are swapped.
    //
    #ifndef PINKY_FINGER_MOD
      #if OPERATING_SYSTEM == 'M'
        #define PINKY_FINGER_MOD LCTL
      #else
        #define PINKY_FINGER_MOD LGUI
      #endif
    #endif
    #ifndef RING1_FINGER_MOD
    #define RING1_FINGER_MOD LALT
    #endif
    #ifndef RING2_FINGER_MOD
    #define RING2_FINGER_MOD RALT
    #endif
    #ifndef MIDDY_FINGER_MOD
      #if OPERATING_SYSTEM == 'M'
        #define MIDDY_FINGER_MOD LGUI
      #else
        #define MIDDY_FINGER_MOD LCTL
      #endif
    #endif
    #ifndef INDEX_FINGER_MOD
    #define INDEX_FINGER_MOD LSFT
    #endif
    //
    // The following settings let you configure mods individually, per finger:
    //
    #ifndef LEFT_PINKY_MOD
    #define LEFT_PINKY_MOD  PINKY_FINGER_MOD
    #endif
    #ifndef RIGHT_PINKY_MOD
    #define RIGHT_PINKY_MOD PINKY_FINGER_MOD
    #endif
    #ifndef LEFT_RING1_MOD
    #define LEFT_RING1_MOD  RING1_FINGER_MOD
    #endif
    #ifndef RIGHT_RING1_MOD
    #define RIGHT_RING1_MOD RING1_FINGER_MOD
    #endif
    #ifndef LEFT_RING2_MOD
    #define LEFT_RING2_MOD  RING2_FINGER_MOD
    #endif
    #ifndef RIGHT_RING2_MOD
    #define RIGHT_RING2_MOD RING2_FINGER_MOD
    #endif
    #ifndef LEFT_MIDDY_MOD
    #define LEFT_MIDDY_MOD  MIDDY_FINGER_MOD
    #endif
    #ifndef RIGHT_MIDDY_MOD
    #define RIGHT_MIDDY_MOD MIDDY_FINGER_MOD
    #endif
    #ifndef LEFT_INDEX_MOD
    #define LEFT_INDEX_MOD  INDEX_FINGER_MOD
    #endif
    #ifndef RIGHT_INDEX_MOD
    #define RIGHT_INDEX_MOD INDEX_FINGER_MOD
    #endif

    //
    // HOMEY_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
    // for the pinky, ring, and middle fingers (which are assigned to Super,
    // Alt, and Ctrl respectively in the Miryoku system) on home row keys.
    //
    #ifndef HOMEY_HOLDING_TYPE
    #define HOMEY_HOLDING_TYPE "tap-preferred"
    #endif

    //
    // HOMEY_HOLDING_TIME defines how long you need to hold (milliseconds)
    // home row mod keys in order to send their modifiers to the computer
    // (i.e. "register" them) for mod-click mouse usage (e.g. Ctrl-Click).
    //
    #ifndef HOMEY_HOLDING_TIME
    #define HOMEY_HOLDING_TIME 240 // TAPPING_TERM + ALLOW_CROSSOVER_AFTER
    #endif

    //
    // HOMEY_STREAK_DECAY defines how long you need to wait (milliseconds)
    // after typing before you can use home row mods again.  It prevents
    // unintended activation of home row mods when you're actively typing.
    //
    #ifndef HOMEY_STREAK_DECAY
    #define HOMEY_STREAK_DECAY 160
    #endif

    //
    // HOMEY_REPEAT_DECAY defines how much time you have left (milliseconds)
    // after tapping a key to hold it again in order to make it auto-repeat.
    //
    #ifndef HOMEY_REPEAT_DECAY
    #define HOMEY_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
    #endif

    //
    // CHORD_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
    // for chorded home row mods (secondary keypresses in multi-mod chords).
    //
    #ifndef CHORD_HOLDING_TYPE
    #define CHORD_HOLDING_TYPE HOMEY_HOLDING_TYPE
    #endif

    //
    // CHORD_HOLDING_TIME defines how long you need to hold (milliseconds)
    // home row mod keys in order to send their modifiers to the computer
    // (i.e. "register" them) for mod-click mouse usage (e.g. Ctrl-Click).
    // This is specifically for secondary keypresses in multi-mod chords.
    //
    #ifndef CHORD_HOLDING_TIME
    #define CHORD_HOLDING_TIME 150
    #endif

    //
    // CHORD_STREAK_DECAY defines how long you need to wait (milliseconds)
    // after typing before you can use home row mods again.  It prevents
    // unintended activation of home row mods when you're actively typing
    // This is specifically for secondary keypresses in multi-mod chords.
    //
    #ifndef CHORD_STREAK_DECAY
    #define CHORD_STREAK_DECAY HOMEY_STREAK_DECAY
    #endif

    //
    // CHORD_REPEAT_DECAY defines how much time you have left (milliseconds)
    // after tapping a key to hold it again in order to make it auto-repeat.
    // This is specifically for secondary keypresses in multi-mod chords.
    //
    #ifndef CHORD_REPEAT_DECAY
    #define CHORD_REPEAT_DECAY HOMEY_REPEAT_DECAY
    #endif

    //
    // INDEX_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
    // for index fingers (which Miryoku assigns to Shift) on home row keys.
    //
    // NOTE: The "tap-preferred" flavor of ZMK hold-tap for index finger keys
    // allows faster activation of the Shift modifier (without having to wait
    // for the modified key to be released as the "balanced" flavor requires).
    // Typing streaks and the `hold-trigger-on-release` setting are disabled
    // for the index fingers so as not to hinder their speed and dexterity.
    //
    #ifndef INDEX_HOLDING_TYPE
    #define INDEX_HOLDING_TYPE "tap-preferred"
    #endif

    //
    // INDEX_HOLDING_TIME defines how long you need to hold (milliseconds)
    // index finger keys in order to send their modifiers to the computer
    // (i.e. "register" them) for mod-click mouse usage (e.g. Shift-Click).
    //
    #ifndef INDEX_HOLDING_TIME
    #define INDEX_HOLDING_TIME 180
    #endif

    //
    // INDEX_STREAK_DECAY defines how long you need to wait (milliseconds)
    // after typing before you can use home row mods again.  It prevents
    // unintended activation of home row mods when you're actively typing.
    //
    #ifndef INDEX_STREAK_DECAY
    #define INDEX_STREAK_DECAY 100
    #endif

    //
    // INDEX_REPEAT_DECAY defines how much time you have left (milliseconds)
    // after tapping a key to hold it again in order to make it auto-repeat.
    //
    #ifndef INDEX_REPEAT_DECAY
    #define INDEX_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
    #endif

    //
    // PLAIN_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
    // for index fingers (which Miryoku assigns to Shift) on home row keys.
    //
    // NOTE: The "tap-preferred" flavor of ZMK hold-tap for index finger keys
    // allows faster activation of the Shift modifier (without having to wait
    // for the modified key to be released as the "balanced" flavor requires).
    // Typing streaks and the `hold-trigger-on-release` setting are disabled
    // for the index fingers so as not to hinder their speed and dexterity.
    //
    #ifndef PLAIN_HOLDING_TYPE
    #define PLAIN_HOLDING_TYPE HOMEY_HOLDING_TYPE
    #endif

    //
    // PLAIN_HOLDING_TIME defines how long you need to hold (milliseconds)
    // index finger keys in order to send their modifiers to the computer
    // (i.e. "register" them) for mod-click mouse usage (e.g. Shift-Click).
    //
    #ifndef PLAIN_HOLDING_TIME
    #define PLAIN_HOLDING_TIME HOMEY_HOLDING_TIME
    #endif

    //
    // PLAIN_STREAK_DECAY defines how long you need to wait (milliseconds)
    // after typing before you can use home row mods again.  It prevents
    // unintended activation of home row mods when you're actively typing.
    //
    #ifndef PLAIN_STREAK_DECAY
    #define PLAIN_STREAK_DECAY HOMEY_STREAK_DECAY
    #endif

    //
    // PLAIN_REPEAT_DECAY defines how much time you have left (milliseconds)
    // after tapping a key to hold it again in order to make it auto-repeat.
    //
    #ifndef PLAIN_REPEAT_DECAY
    #define PLAIN_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
    #endif

    //
    // THUMB_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
    // for the thumbs (which are assigned to 6 layers in the Miryoku system).
    //
    // NOTE: The "balanced" flavor of ZMK hold-tap provides instant modifier
    // activation for the symbol layer (if the tapped symbol key is released
    // while the thumb layer key is still held down) for quicker programming.
    //
    #ifndef THUMB_HOLDING_TYPE
    #define THUMB_HOLDING_TYPE "balanced"
    #endif

    //
    // THUMB_HOLDING_TIME defines how long you need to hold (milliseconds)
    // a thumb key to activate a layer.  Shorter holds are treated as taps.
    //
    #ifndef THUMB_HOLDING_TIME
    #define THUMB_HOLDING_TIME 200
    #endif

    //
    // THUMB_REPEAT_DECAY defines how much time you have left (milliseconds)
    // after tapping a key to hold it again in order to make it auto-repeat.
    //
    #ifndef THUMB_REPEAT_DECAY
    #define THUMB_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
    #endif

    //
    // SPACE_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
    // for spacebar (assigned to the right thumb's home position by default).
    //
    // NOTE: The "balanced" flavor of ZMK hold-tap provides instant modifier
    // activation for the symbol layer (if the tapped symbol key is released
    // while the thumb layer key is still held down) for quicker programming.
    //
    #ifndef SPACE_HOLDING_TYPE
    #define SPACE_HOLDING_TYPE THUMB_HOLDING_TYPE
    #endif

    //
    // SPACE_HOLDING_TIME defines how long you need to hold (milliseconds)
    // the space thumb key to activate.  Shorter holds are treated as taps.
    //
    #ifndef SPACE_HOLDING_TIME
    #define SPACE_HOLDING_TIME THUMB_HOLDING_TIME
    #endif

    //
    // SPACE_REPEAT_DECAY defines how much time you have left (milliseconds)
    // after tapping a key to hold it again in order to make it auto-repeat.
    //
    #ifndef SPACE_REPEAT_DECAY
    #define SPACE_REPEAT_DECAY 150
    #endif

 // Adv360 key positions index for positional hold-tap
  
    #define LEFT_HAND_KEYS      \
 			0 1 2 3 4 5 6 \
            14 15 16 17 18 19 20 \
            28 29 30 31 32 33 34 \
            46 47 48 49 50 51 \
            60 61 62 63 64
    #define RIGHT_HAND_KEYS     \
				   7 8 9 10 11 12 13 \
                   21 22 23 24 25 26 27 \
                   39 40 41 42 43 44 45 \
                   54 55 56 57 58 59 \
                   71 72 73 74 75
    #define THUMB_KEYS          \
                        35 36       37 38                \
                         52 65     53 68                 \
                          66 67   69 70

    #define LEFT_PINKY_KEY  KEY_LH_C6R3
    #define LEFT_RING1_KEY  KEY_LH_C5R3
    #define LEFT_RING2_KEY  KEY_LH_C5R2
    #define LEFT_MIDDY_KEY  KEY_LH_C4R3
    #define LEFT_INDEX_KEY  KEY_LH_C3R3
    #define LEFT_PLAIN_KEY  KEY_LH_C2R3

    #define RIGHT_PINKY_KEY KEY_RH_C6R3
    #define RIGHT_RING1_KEY KEY_RH_C5R3
    #define RIGHT_RING2_KEY KEY_RH_C5R2
    #define RIGHT_MIDDY_KEY KEY_RH_C4R3
    #define RIGHT_INDEX_KEY KEY_RH_C3R3
    #define RIGHT_PLAIN_KEY KEY_RH_C2R3
    #if defined(LAYER_Engram) && LAYER_Engram == 0
    #define LeftPlainKey  engram_COMMA
    #define RightPlainKey engram_DOT
    #else
    #define LeftPlainKey  kp LEFT_PLAIN_KEY
    #define RightPlainKey kp RIGHT_PLAIN_KEY
    #endif

    //
    // Home row mods with bilateral combinations support
    //
    #ifndef PINKY_HOLDING_TYPE
    #define PINKY_HOLDING_TYPE HOMEY_HOLDING_TYPE
    #endif
    #ifndef PINKY_CHORD_HOLDING_TYPE
    #define PINKY_CHORD_HOLDING_TYPE CHORD_HOLDING_TYPE
    #endif
    #ifndef LEFT_PINKY_CHORD_HOLDING_TYPE
    #define LEFT_PINKY_CHORD_HOLDING_TYPE PINKY_CHORD_HOLDING_TYPE
    #endif
    #ifndef RIGHT_PINKY_CHORD_HOLDING_TYPE
    #define RIGHT_PINKY_CHORD_HOLDING_TYPE PINKY_CHORD_HOLDING_TYPE
    #endif
    #ifndef PINKY_HOLDING_TIME
    #define PINKY_HOLDING_TIME HOMEY_HOLDING_TIME
    #endif
    #ifndef PINKY_CHORD_HOLDING_TIME
    #define PINKY_CHORD_HOLDING_TIME CHORD_HOLDING_TIME
    #endif
    #ifndef LEFT_PINKY_CHORD_HOLDING_TIME
    #define LEFT_PINKY_CHORD_HOLDING_TIME PINKY_CHORD_HOLDING_TIME
    #endif
    #ifndef RIGHT_PINKY_CHORD_HOLDING_TIME
    #define RIGHT_PINKY_CHORD_HOLDING_TIME PINKY_CHORD_HOLDING_TIME
    #endif
    #ifndef PINKY_STREAK_DECAY
    #define PINKY_STREAK_DECAY HOMEY_STREAK_DECAY
    #endif
    #ifndef PINKY_CHORD_STREAK_DECAY
    #define PINKY_CHORD_STREAK_DECAY CHORD_STREAK_DECAY
    #endif
    #ifndef LEFT_PINKY_CHORD_STREAK_DECAY
    #define LEFT_PINKY_CHORD_STREAK_DECAY PINKY_CHORD_STREAK_DECAY
    #endif
    #ifndef RIGHT_PINKY_CHORD_STREAK_DECAY
    #define RIGHT_PINKY_CHORD_STREAK_DECAY PINKY_CHORD_STREAK_DECAY
    #endif
    #ifndef PINKY_REPEAT_DECAY
    #define PINKY_REPEAT_DECAY HOMEY_REPEAT_DECAY
    #endif
    #ifndef PINKY_CHORD_REPEAT_DECAY
    #define PINKY_CHORD_REPEAT_DECAY CHORD_REPEAT_DECAY
    #endif
    #ifndef LEFT_PINKY_CHORD_REPEAT_DECAY
    #define LEFT_PINKY_CHORD_REPEAT_DECAY PINKY_CHORD_REPEAT_DECAY
    #endif
    #ifndef RIGHT_PINKY_CHORD_REPEAT_DECAY
    #define RIGHT_PINKY_CHORD_REPEAT_DECAY PINKY_CHORD_REPEAT_DECAY
    #endif
    #ifndef RING1_HOLDING_TYPE
    #define RING1_HOLDING_TYPE HOMEY_HOLDING_TYPE
    #endif
    #ifndef RING1_CHORD_HOLDING_TYPE
    #define RING1_CHORD_HOLDING_TYPE CHORD_HOLDING_TYPE
    #endif
    #ifndef LEFT_RING1_CHORD_HOLDING_TYPE
    #define LEFT_RING1_CHORD_HOLDING_TYPE RING1_CHORD_HOLDING_TYPE
    #endif
    #ifndef RIGHT_RING1_CHORD_HOLDING_TYPE
    #define RIGHT_RING1_CHORD_HOLDING_TYPE RING1_CHORD_HOLDING_TYPE
    #endif
    #ifndef RING1_HOLDING_TIME
    #define RING1_HOLDING_TIME HOMEY_HOLDING_TIME
    #endif
    #ifndef RING1_CHORD_HOLDING_TIME
    #define RING1_CHORD_HOLDING_TIME CHORD_HOLDING_TIME
    #endif
    #ifndef LEFT_RING1_CHORD_HOLDING_TIME
    #define LEFT_RING1_CHORD_HOLDING_TIME RING1_CHORD_HOLDING_TIME
    #endif
    #ifndef RIGHT_RING1_CHORD_HOLDING_TIME
    #define RIGHT_RING1_CHORD_HOLDING_TIME RING1_CHORD_HOLDING_TIME
    #endif
    #ifndef RING1_STREAK_DECAY
    #define RING1_STREAK_DECAY HOMEY_STREAK_DECAY
    #endif
    #ifndef RING1_CHORD_STREAK_DECAY
    #define RING1_CHORD_STREAK_DECAY CHORD_STREAK_DECAY
    #endif
    #ifndef LEFT_RING1_CHORD_STREAK_DECAY
    #define LEFT_RING1_CHORD_STREAK_DECAY RING1_CHORD_STREAK_DECAY
    #endif
    #ifndef RIGHT_RING1_CHORD_STREAK_DECAY
    #define RIGHT_RING1_CHORD_STREAK_DECAY RING1_CHORD_STREAK_DECAY
    #endif
    #ifndef RING1_REPEAT_DECAY
    #define RING1_REPEAT_DECAY HOMEY_REPEAT_DECAY
    #endif
    #ifndef RING1_CHORD_REPEAT_DECAY
    #define RING1_CHORD_REPEAT_DECAY CHORD_REPEAT_DECAY
    #endif
    #ifndef LEFT_RING1_CHORD_REPEAT_DECAY
    #define LEFT_RING1_CHORD_REPEAT_DECAY RING1_CHORD_REPEAT_DECAY
    #endif
    #ifndef RIGHT_RING1_CHORD_REPEAT_DECAY
    #define RIGHT_RING1_CHORD_REPEAT_DECAY RING1_CHORD_REPEAT_DECAY
    #endif
    #ifndef RING2_HOLDING_TYPE
    #define RING2_HOLDING_TYPE HOMEY_HOLDING_TYPE
    #endif
    #ifndef RING2_CHORD_HOLDING_TYPE
    #define RING2_CHORD_HOLDING_TYPE CHORD_HOLDING_TYPE
    #endif
    #ifndef LEFT_RING2_CHORD_HOLDING_TYPE
    #define LEFT_RING2_CHORD_HOLDING_TYPE RING2_CHORD_HOLDING_TYPE
    #endif
    #ifndef RIGHT_RING2_CHORD_HOLDING_TYPE
    #define RIGHT_RING2_CHORD_HOLDING_TYPE RING2_CHORD_HOLDING_TYPE
    #endif
    #ifndef RING2_HOLDING_TIME
    #define RING2_HOLDING_TIME HOMEY_HOLDING_TIME
    #endif
    #ifndef RING2_CHORD_HOLDING_TIME
    #define RING2_CHORD_HOLDING_TIME CHORD_HOLDING_TIME
    #endif
    #ifndef LEFT_RING2_CHORD_HOLDING_TIME
    #define LEFT_RING2_CHORD_HOLDING_TIME RING2_CHORD_HOLDING_TIME
    #endif
    #ifndef RIGHT_RING2_CHORD_HOLDING_TIME
    #define RIGHT_RING2_CHORD_HOLDING_TIME RING2_CHORD_HOLDING_TIME
    #endif
    #ifndef RING2_STREAK_DECAY
    #define RING2_STREAK_DECAY HOMEY_STREAK_DECAY
    #endif
    #ifndef RING2_CHORD_STREAK_DECAY
    #define RING2_CHORD_STREAK_DECAY CHORD_STREAK_DECAY
    #endif
    #ifndef LEFT_RING2_CHORD_STREAK_DECAY
    #define LEFT_RING2_CHORD_STREAK_DECAY RING2_CHORD_STREAK_DECAY
    #endif
    #ifndef RIGHT_RING2_CHORD_STREAK_DECAY
    #define RIGHT_RING2_CHORD_STREAK_DECAY RING2_CHORD_STREAK_DECAY
    #endif
    #ifndef RING2_REPEAT_DECAY
    #define RING2_REPEAT_DECAY HOMEY_REPEAT_DECAY
    #endif
    #ifndef RING2_CHORD_REPEAT_DECAY
    #define RING2_CHORD_REPEAT_DECAY CHORD_REPEAT_DECAY
    #endif
    #ifndef LEFT_RING2_CHORD_REPEAT_DECAY
    #define LEFT_RING2_CHORD_REPEAT_DECAY RING2_CHORD_REPEAT_DECAY
    #endif
    #ifndef RIGHT_RING2_CHORD_REPEAT_DECAY
    #define RIGHT_RING2_CHORD_REPEAT_DECAY RING2_CHORD_REPEAT_DECAY
    #endif
    #ifndef MIDDY_HOLDING_TYPE
    #define MIDDY_HOLDING_TYPE HOMEY_HOLDING_TYPE
    #endif
    #ifndef MIDDY_CHORD_HOLDING_TYPE
    #define MIDDY_CHORD_HOLDING_TYPE CHORD_HOLDING_TYPE
    #endif
    #ifndef LEFT_MIDDY_CHORD_HOLDING_TYPE
    #define LEFT_MIDDY_CHORD_HOLDING_TYPE MIDDY_CHORD_HOLDING_TYPE
    #endif
    #ifndef RIGHT_MIDDY_CHORD_HOLDING_TYPE
    #define RIGHT_MIDDY_CHORD_HOLDING_TYPE MIDDY_CHORD_HOLDING_TYPE
    #endif
    #ifndef MIDDY_HOLDING_TIME
    #define MIDDY_HOLDING_TIME HOMEY_HOLDING_TIME
    #endif
    #ifndef MIDDY_CHORD_HOLDING_TIME
    #define MIDDY_CHORD_HOLDING_TIME CHORD_HOLDING_TIME
    #endif
    #ifndef LEFT_MIDDY_CHORD_HOLDING_TIME
    #define LEFT_MIDDY_CHORD_HOLDING_TIME MIDDY_CHORD_HOLDING_TIME
    #endif
    #ifndef RIGHT_MIDDY_CHORD_HOLDING_TIME
    #define RIGHT_MIDDY_CHORD_HOLDING_TIME MIDDY_CHORD_HOLDING_TIME
    #endif
    #ifndef MIDDY_STREAK_DECAY
    #define MIDDY_STREAK_DECAY HOMEY_STREAK_DECAY
    #endif
    #ifndef MIDDY_CHORD_STREAK_DECAY
    #define MIDDY_CHORD_STREAK_DECAY CHORD_STREAK_DECAY
    #endif
    #ifndef LEFT_MIDDY_CHORD_STREAK_DECAY
    #define LEFT_MIDDY_CHORD_STREAK_DECAY MIDDY_CHORD_STREAK_DECAY
    #endif
    #ifndef RIGHT_MIDDY_CHORD_STREAK_DECAY
    #define RIGHT_MIDDY_CHORD_STREAK_DECAY MIDDY_CHORD_STREAK_DECAY
    #endif
    #ifndef MIDDY_REPEAT_DECAY
    #define MIDDY_REPEAT_DECAY HOMEY_REPEAT_DECAY
    #endif
    #ifndef MIDDY_CHORD_REPEAT_DECAY
    #define MIDDY_CHORD_REPEAT_DECAY CHORD_REPEAT_DECAY
    #endif
    #ifndef LEFT_MIDDY_CHORD_REPEAT_DECAY
    #define LEFT_MIDDY_CHORD_REPEAT_DECAY MIDDY_CHORD_REPEAT_DECAY
    #endif
    #ifndef RIGHT_MIDDY_CHORD_REPEAT_DECAY
    #define RIGHT_MIDDY_CHORD_REPEAT_DECAY MIDDY_CHORD_REPEAT_DECAY
    #endif
    #ifndef INDEX_HOLDING_TYPE
    #define INDEX_HOLDING_TYPE HOMEY_HOLDING_TYPE
    #endif
    #ifndef INDEX_CHORD_HOLDING_TYPE
    #define INDEX_CHORD_HOLDING_TYPE CHORD_HOLDING_TYPE
    #endif
    #ifndef LEFT_INDEX_CHORD_HOLDING_TYPE
    #define LEFT_INDEX_CHORD_HOLDING_TYPE INDEX_CHORD_HOLDING_TYPE
    #endif
    #ifndef RIGHT_INDEX_CHORD_HOLDING_TYPE
    #define RIGHT_INDEX_CHORD_HOLDING_TYPE INDEX_CHORD_HOLDING_TYPE
    #endif
    #ifndef INDEX_HOLDING_TIME
    #define INDEX_HOLDING_TIME HOMEY_HOLDING_TIME
    #endif
    #ifndef INDEX_CHORD_HOLDING_TIME
    #define INDEX_CHORD_HOLDING_TIME CHORD_HOLDING_TIME
    #endif
    #ifndef LEFT_INDEX_CHORD_HOLDING_TIME
    #define LEFT_INDEX_CHORD_HOLDING_TIME INDEX_CHORD_HOLDING_TIME
    #endif
    #ifndef RIGHT_INDEX_CHORD_HOLDING_TIME
    #define RIGHT_INDEX_CHORD_HOLDING_TIME INDEX_CHORD_HOLDING_TIME
    #endif
    #ifndef INDEX_STREAK_DECAY
    #define INDEX_STREAK_DECAY HOMEY_STREAK_DECAY
    #endif
    #ifndef INDEX_CHORD_STREAK_DECAY
    #define INDEX_CHORD_STREAK_DECAY CHORD_STREAK_DECAY
    #endif
    #ifndef LEFT_INDEX_CHORD_STREAK_DECAY
    #define LEFT_INDEX_CHORD_STREAK_DECAY INDEX_CHORD_STREAK_DECAY
    #endif
    #ifndef RIGHT_INDEX_CHORD_STREAK_DECAY
    #define RIGHT_INDEX_CHORD_STREAK_DECAY INDEX_CHORD_STREAK_DECAY
    #endif
    #ifndef INDEX_REPEAT_DECAY
    #define INDEX_REPEAT_DECAY HOMEY_REPEAT_DECAY
    #endif
    #ifndef INDEX_CHORD_REPEAT_DECAY
    #define INDEX_CHORD_REPEAT_DECAY CHORD_REPEAT_DECAY
    #endif
    #ifndef LEFT_INDEX_CHORD_REPEAT_DECAY
    #define LEFT_INDEX_CHORD_REPEAT_DECAY INDEX_CHORD_REPEAT_DECAY
    #endif
    #ifndef RIGHT_INDEX_CHORD_REPEAT_DECAY
    #define RIGHT_INDEX_CHORD_REPEAT_DECAY INDEX_CHORD_REPEAT_DECAY
    #endif
    #ifndef LEFT_PINKY_HOLDING_TYPE
    #define LEFT_PINKY_HOLDING_TYPE PINKY_HOLDING_TYPE
    #endif
    #ifndef LEFT_PINKY_HOLDING_TIME
    #define LEFT_PINKY_HOLDING_TIME PINKY_HOLDING_TIME
    #endif
    #ifndef LEFT_PINKY_STREAK_DECAY
    #define LEFT_PINKY_STREAK_DECAY PINKY_STREAK_DECAY
    #endif
    #ifndef LEFT_PINKY_REPEAT_DECAY
    #define LEFT_PINKY_REPEAT_DECAY PINKY_REPEAT_DECAY
    #endif
    left_pinky: homey_left_pinky {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_PINKY_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
        quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    left_pinky_bilateral: homey_left_pinky_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_PINKY_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
        quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&left_pinky_hold>, <&kp>;
    };
    left_pinky_hold: homey_left_pinky_hold {
        compatible = "zmk,behavior-macro-one-param";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <1>;
        bindings
            = <&macro_param_1to1>
            , <&macro_press &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_LeftPinky
            , <&macro_press &mo LAYER_LeftPinky>
            #endif
            , <&macro_pause_for_release>
            , <&macro_param_1to1>
            , <&macro_release &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_LeftPinky
            , <&macro_release &mo LAYER_LeftPinky>
            #endif
            ;
    };
    left_pinky_tap: homey_left_pinky_tap {
        compatible = "zmk,behavior-macro-one-param";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <1>;
        bindings
            = <&macro_release
                &kp LSFT &kp RSFT
                &kp LALT &kp RALT
                &kp LCTL &kp RCTL
                &kp LGUI &kp RGUI>
            , <&macro_tap &kp LEFT_PINKY_KEY>
            , <&macro_param_1to1>
            , <&macro_tap &kp MACRO_PLACEHOLDER>
            ;
    };
    #define LeftPinky(key, layer_index) LeftPinky_unroll(layer_index) (key)
    #define LeftPinky_unroll(layer_index) LeftPinky_concat(LeftPinky_layer, layer_index)
    #define LeftPinky_concat(prefix, layer_index) prefix ## layer_index
    #ifdef ENFORCE_BILATERAL
    #define left_pinky_layer0_variant left_pinky_bilateral
    #else
    #define left_pinky_layer0_variant left_pinky
    #endif
    #define LeftPinky_layer0(key) left_pinky_layer0_variant LEFT_PINKY_MOD key
    #define LeftPinky_layer1(key) left_pinky LEFT_PINKY_MOD key
    #define LeftPinky_layer2(key) left_pinky LEFT_PINKY_MOD key
    #define LeftPinky_layer3(key) left_pinky LEFT_PINKY_MOD key
    #define LeftPinky_layer4(key) left_pinky LEFT_PINKY_MOD key
    #define LeftPinky_layer5(key) left_pinky LEFT_PINKY_MOD key
    #define LeftPinky_layer6(key) left_pinky LEFT_PINKY_MOD key
    #define LeftPinky_layer7(key) left_pinky LEFT_PINKY_MOD key
    #define LeftPinky_layer8(key) left_pinky LEFT_PINKY_MOD key
    #ifndef RIGHT_PINKY_HOLDING_TYPE
    #define RIGHT_PINKY_HOLDING_TYPE PINKY_HOLDING_TYPE
    #endif
    #ifndef RIGHT_PINKY_HOLDING_TIME
    #define RIGHT_PINKY_HOLDING_TIME PINKY_HOLDING_TIME
    #endif
    #ifndef RIGHT_PINKY_STREAK_DECAY
    #define RIGHT_PINKY_STREAK_DECAY PINKY_STREAK_DECAY
    #endif
    #ifndef RIGHT_PINKY_REPEAT_DECAY
    #define RIGHT_PINKY_REPEAT_DECAY PINKY_REPEAT_DECAY
    #endif
    right_pinky: homey_right_pinky {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_PINKY_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    right_pinky_bilateral: homey_right_pinky_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_PINKY_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&right_pinky_hold>, <&kp>;
    };
    right_pinky_hold: homey_right_pinky_hold {
        compatible = "zmk,behavior-macro-one-param";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <1>;
        bindings
            = <&macro_param_1to1>
            , <&macro_press &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_RightPinky
            , <&macro_press &mo LAYER_RightPinky>
            #endif
            , <&macro_pause_for_release>
            , <&macro_param_1to1>
            , <&macro_release &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_RightPinky
            , <&macro_release &mo LAYER_RightPinky>
            #endif
            ;
    };
    right_pinky_tap: homey_right_pinky_tap {
        compatible = "zmk,behavior-macro-one-param";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <1>;
        bindings
            = <&macro_release
                &kp LSFT &kp RSFT
                &kp LALT &kp RALT
                &kp LCTL &kp RCTL
                &kp LGUI &kp RGUI>
            , <&macro_tap &kp RIGHT_PINKY_KEY>
            , <&macro_param_1to1>
            , <&macro_tap &kp MACRO_PLACEHOLDER>
            ;
    };
    #define RightPinky(key, layer_index) RightPinky_unroll(layer_index) (key)
    #define RightPinky_unroll(layer_index) RightPinky_concat(RightPinky_layer, layer_index)
    #define RightPinky_concat(prefix, layer_index) prefix ## layer_index
    #ifdef ENFORCE_BILATERAL
    #define right_pinky_layer0_variant right_pinky_bilateral
    #else
    #define right_pinky_layer0_variant right_pinky
    #endif
    #define RightPinky_layer0(key) right_pinky_layer0_variant RIGHT_PINKY_MOD key
    #define RightPinky_layer1(key) right_pinky RIGHT_PINKY_MOD key
    #define RightPinky_layer2(key) right_pinky RIGHT_PINKY_MOD key
    #define RightPinky_layer3(key) right_pinky RIGHT_PINKY_MOD key
    #define RightPinky_layer4(key) right_pinky RIGHT_PINKY_MOD key
    #define RightPinky_layer5(key) right_pinky RIGHT_PINKY_MOD key
    #define RightPinky_layer6(key) right_pinky RIGHT_PINKY_MOD key
    #define RightPinky_layer7(key) right_pinky RIGHT_PINKY_MOD key
    #define RightPinky_layer8(key) right_pinky RIGHT_PINKY_MOD key
    #ifndef LEFT_RING1_HOLDING_TYPE
    #define LEFT_RING1_HOLDING_TYPE RING1_HOLDING_TYPE
    #endif
    #ifndef LEFT_RING1_HOLDING_TIME
    #define LEFT_RING1_HOLDING_TIME RING1_HOLDING_TIME
    #endif
    #ifndef LEFT_RING1_STREAK_DECAY
    #define LEFT_RING1_STREAK_DECAY RING1_STREAK_DECAY
    #endif
    #ifndef LEFT_RING1_REPEAT_DECAY
    #define LEFT_RING1_REPEAT_DECAY RING1_REPEAT_DECAY
    #endif
    left_ring1: homey_left_ring1 {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_RING1_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_RING1_HOLDING_TIME>;
        quick-tap-ms = <LEFT_RING1_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_RING1_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    left_ring1_bilateral: homey_left_ring1_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_RING1_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_RING1_HOLDING_TIME>;
        quick-tap-ms = <LEFT_RING1_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_RING1_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&left_ring1_hold>, <&kp>;
    };
    left_ring1_hold: homey_left_ring1_hold {
        compatible = "zmk,behavior-macro-one-param";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <1>;
        bindings
            = <&macro_param_1to1>
            , <&macro_press &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_LeftRing1
            , <&macro_press &mo LAYER_LeftRing1>
            #endif
            , <&macro_pause_for_release>
            , <&macro_param_1to1>
            , <&macro_release &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_LeftRing1
            , <&macro_release &mo LAYER_LeftRing1>
            #endif
            ;
    };
    left_ring1_tap: homey_left_ring1_tap {
        compatible = "zmk,behavior-macro-one-param";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <1>;
        bindings
            = <&macro_release
                &kp LSFT &kp RSFT
                &kp LALT &kp RALT
                &kp LCTL &kp RCTL
                &kp LGUI &kp RGUI>
            , <&macro_tap &kp LEFT_RING1_KEY>
            , <&macro_param_1to1>
            , <&macro_tap &kp MACRO_PLACEHOLDER>
            ;
    };
    #define LeftRing1(key, layer_index) LeftRing1_unroll(layer_index) (key)
    #define LeftRing1_unroll(layer_index) LeftRing1_concat(LeftRing1_layer, layer_index)
    #define LeftRing1_concat(prefix, layer_index) prefix ## layer_index
    #ifdef ENFORCE_BILATERAL
    #define left_ring1_layer0_variant left_ring1_bilateral
    #else
    #define left_ring1_layer0_variant left_ring1
    #endif
    #define LeftRing1_layer0(key) left_ring1_layer0_variant LEFT_RING1_MOD key
    #define LeftRing1_layer1(key) left_ring1 LEFT_RING1_MOD key
    #define LeftRing1_layer2(key) left_ring1 LEFT_RING1_MOD key
    #define LeftRing1_layer3(key) left_ring1 LEFT_RING1_MOD key
    #define LeftRing1_layer4(key) left_ring1 LEFT_RING1_MOD key
    #define LeftRing1_layer5(key) left_ring1 LEFT_RING1_MOD key
    #define LeftRing1_layer6(key) left_ring1 LEFT_RING1_MOD key
    #define LeftRing1_layer7(key) left_ring1 LEFT_RING1_MOD key
    #define LeftRing1_layer8(key) left_ring1 LEFT_RING1_MOD key
    #ifndef RIGHT_RING1_HOLDING_TYPE
    #define RIGHT_RING1_HOLDING_TYPE RING1_HOLDING_TYPE
    #endif
    #ifndef RIGHT_RING1_HOLDING_TIME
    #define RIGHT_RING1_HOLDING_TIME RING1_HOLDING_TIME
    #endif
    #ifndef RIGHT_RING1_STREAK_DECAY
    #define RIGHT_RING1_STREAK_DECAY RING1_STREAK_DECAY
    #endif
    #ifndef RIGHT_RING1_REPEAT_DECAY
    #define RIGHT_RING1_REPEAT_DECAY RING1_REPEAT_DECAY
    #endif
    right_ring1: homey_right_ring1 {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_RING1_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_RING1_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_RING1_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_RING1_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    right_ring1_bilateral: homey_right_ring1_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_RING1_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_RING1_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_RING1_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_RING1_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&right_ring1_hold>, <&kp>;
    };
    right_ring1_hold: homey_right_ring1_hold {
        compatible = "zmk,behavior-macro-one-param";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <1>;
        bindings
            = <&macro_param_1to1>
            , <&macro_press &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_RightRing1
            , <&macro_press &mo LAYER_RightRing1>
            #endif
            , <&macro_pause_for_release>
            , <&macro_param_1to1>
            , <&macro_release &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_RightRing1
            , <&macro_release &mo LAYER_RightRing1>
            #endif
            ;
    };
    right_ring1_tap: homey_right_ring1_tap {
        compatible = "zmk,behavior-macro-one-param";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <1>;
        bindings
            = <&macro_release
                &kp LSFT &kp RSFT
                &kp LALT &kp RALT
                &kp LCTL &kp RCTL
                &kp LGUI &kp RGUI>
            , <&macro_tap &kp RIGHT_RING1_KEY>
            , <&macro_param_1to1>
            , <&macro_tap &kp MACRO_PLACEHOLDER>
            ;
    };
    #define RightRing1(key, layer_index) RightRing1_unroll(layer_index) (key)
    #define RightRing1_unroll(layer_index) RightRing1_concat(RightRing1_layer, layer_index)
    #define RightRing1_concat(prefix, layer_index) prefix ## layer_index
    #ifdef ENFORCE_BILATERAL
    #define right_ring1_layer0_variant right_ring1_bilateral
    #else
    #define right_ring1_layer0_variant right_ring1
    #endif
    #define RightRing1_layer0(key) right_ring1_layer0_variant RIGHT_RING1_MOD key
    #define RightRing1_layer1(key) right_ring1 RIGHT_RING1_MOD key
    #define RightRing1_layer2(key) right_ring1 RIGHT_RING1_MOD key
    #define RightRing1_layer3(key) right_ring1 RIGHT_RING1_MOD key
    #define RightRing1_layer4(key) right_ring1 RIGHT_RING1_MOD key
    #define RightRing1_layer5(key) right_ring1 RIGHT_RING1_MOD key
    #define RightRing1_layer6(key) right_ring1 RIGHT_RING1_MOD key
    #define RightRing1_layer7(key) right_ring1 RIGHT_RING1_MOD key
    #define RightRing1_layer8(key) right_ring1 RIGHT_RING1_MOD key
    #ifndef LEFT_RING2_HOLDING_TYPE
    #define LEFT_RING2_HOLDING_TYPE RING2_HOLDING_TYPE
    #endif
    #ifndef LEFT_RING2_HOLDING_TIME
    #define LEFT_RING2_HOLDING_TIME RING2_HOLDING_TIME
    #endif
    #ifndef LEFT_RING2_STREAK_DECAY
    #define LEFT_RING2_STREAK_DECAY RING2_STREAK_DECAY
    #endif
    #ifndef LEFT_RING2_REPEAT_DECAY
    #define LEFT_RING2_REPEAT_DECAY RING2_REPEAT_DECAY
    #endif
    left_ring2: homey_left_ring2 {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_RING2_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_RING2_HOLDING_TIME>;
        quick-tap-ms = <LEFT_RING2_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_RING2_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    left_ring2_bilateral: homey_left_ring2_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_RING2_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_RING2_HOLDING_TIME>;
        quick-tap-ms = <LEFT_RING2_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_RING2_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&left_ring2_hold>, <&kp>;
    };
    left_ring2_hold: homey_left_ring2_hold {
        compatible = "zmk,behavior-macro-one-param";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <1>;
        bindings
            = <&macro_param_1to1>
            , <&macro_press &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_LeftRing2
            , <&macro_press &mo LAYER_LeftRing2>
            #endif
            , <&macro_pause_for_release>
            , <&macro_param_1to1>
            , <&macro_release &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_LeftRing2
            , <&macro_release &mo LAYER_LeftRing2>
            #endif
            ;
    };
    left_ring2_tap: homey_left_ring2_tap {
        compatible = "zmk,behavior-macro-one-param";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <1>;
        bindings
            = <&macro_release
                &kp LSFT &kp RSFT
                &kp LALT &kp RALT
                &kp LCTL &kp RCTL
                &kp LGUI &kp RGUI>
            , <&macro_tap &kp LEFT_RING2_KEY>
            , <&macro_param_1to1>
            , <&macro_tap &kp MACRO_PLACEHOLDER>
            ;
    };
    #define LeftRing2(key, layer_index) LeftRing2_unroll(layer_index) (key)
    #define LeftRing2_unroll(layer_index) LeftRing2_concat(LeftRing2_layer, layer_index)
    #define LeftRing2_concat(prefix, layer_index) prefix ## layer_index
    #ifdef ENFORCE_BILATERAL
    #define left_ring2_layer0_variant left_ring2_bilateral
    #else
    #define left_ring2_layer0_variant left_ring2
    #endif
    #define LeftRing2_layer0(key) left_ring2_layer0_variant LEFT_RING2_MOD key
    #define LeftRing2_layer1(key) left_ring2 LEFT_RING2_MOD key
    #define LeftRing2_layer2(key) left_ring2 LEFT_RING2_MOD key
    #define LeftRing2_layer3(key) left_ring2 LEFT_RING2_MOD key
    #define LeftRing2_layer4(key) left_ring2 LEFT_RING2_MOD key
    #define LeftRing2_layer5(key) left_ring2 LEFT_RING2_MOD key
    #define LeftRing2_layer6(key) left_ring2 LEFT_RING2_MOD key
    #define LeftRing2_layer7(key) left_ring2 LEFT_RING2_MOD key
    #define LeftRing2_layer8(key) left_ring2 LEFT_RING2_MOD key
    #ifndef RIGHT_RING2_HOLDING_TYPE
    #define RIGHT_RING2_HOLDING_TYPE RING2_HOLDING_TYPE
    #endif
    #ifndef RIGHT_RING2_HOLDING_TIME
    #define RIGHT_RING2_HOLDING_TIME RING2_HOLDING_TIME
    #endif
    #ifndef RIGHT_RING2_STREAK_DECAY
    #define RIGHT_RING2_STREAK_DECAY RING2_STREAK_DECAY
    #endif
    #ifndef RIGHT_RING2_REPEAT_DECAY
    #define RIGHT_RING2_REPEAT_DECAY RING2_REPEAT_DECAY
    #endif
    right_ring2: homey_right_ring2 {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_RING2_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_RING2_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_RING2_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_RING2_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    right_ring2_bilateral: homey_right_ring2_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_RING2_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_RING2_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_RING2_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_RING2_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&right_ring2_hold>, <&kp>;
    };
    right_ring2_hold: homey_right_ring2_hold {
        compatible = "zmk,behavior-macro-one-param";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <1>;
        bindings
            = <&macro_param_1to1>
            , <&macro_press &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_RightRing2
            , <&macro_press &mo LAYER_RightRing2>
            #endif
            , <&macro_pause_for_release>
            , <&macro_param_1to1>
            , <&macro_release &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_RightRing2
            , <&macro_release &mo LAYER_RightRing2>
            #endif
            ;
    };
    right_ring2_tap: homey_right_ring2_tap {
        compatible = "zmk,behavior-macro-one-param";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <1>;
        bindings
            = <&macro_release
                &kp LSFT &kp RSFT
                &kp LALT &kp RALT
                &kp LCTL &kp RCTL
                &kp LGUI &kp RGUI>
            , <&macro_tap &kp RIGHT_RING2_KEY>
            , <&macro_param_1to1>
            , <&macro_tap &kp MACRO_PLACEHOLDER>
            ;
    };
    #define RightRing2(key, layer_index) RightRing2_unroll(layer_index) (key)
    #define RightRing2_unroll(layer_index) RightRing2_concat(RightRing2_layer, layer_index)
    #define RightRing2_concat(prefix, layer_index) prefix ## layer_index
    #ifdef ENFORCE_BILATERAL
    #define right_ring2_layer0_variant right_ring2_bilateral
    #else
    #define right_ring2_layer0_variant right_ring2
    #endif
    #define RightRing2_layer0(key) right_ring2_layer0_variant RIGHT_RING2_MOD key
    #define RightRing2_layer1(key) right_ring2 RIGHT_RING2_MOD key
    #define RightRing2_layer2(key) right_ring2 RIGHT_RING2_MOD key
    #define RightRing2_layer3(key) right_ring2 RIGHT_RING2_MOD key
    #define RightRing2_layer4(key) right_ring2 RIGHT_RING2_MOD key
    #define RightRing2_layer5(key) right_ring2 RIGHT_RING2_MOD key
    #define RightRing2_layer6(key) right_ring2 RIGHT_RING2_MOD key
    #define RightRing2_layer7(key) right_ring2 RIGHT_RING2_MOD key
    #define RightRing2_layer8(key) right_ring2 RIGHT_RING2_MOD key
    #ifndef LEFT_MIDDY_HOLDING_TYPE
    #define LEFT_MIDDY_HOLDING_TYPE MIDDY_HOLDING_TYPE
    #endif
    #ifndef LEFT_MIDDY_HOLDING_TIME
    #define LEFT_MIDDY_HOLDING_TIME MIDDY_HOLDING_TIME
    #endif
    #ifndef LEFT_MIDDY_STREAK_DECAY
    #define LEFT_MIDDY_STREAK_DECAY MIDDY_STREAK_DECAY
    #endif
    #ifndef LEFT_MIDDY_REPEAT_DECAY
    #define LEFT_MIDDY_REPEAT_DECAY MIDDY_REPEAT_DECAY
    #endif
    left_middy: homey_left_middy {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_MIDDY_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
        quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    left_middy_bilateral: homey_left_middy_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_MIDDY_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
        quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&left_middy_hold>, <&kp>;
    };
    left_middy_hold: homey_left_middy_hold {
        compatible = "zmk,behavior-macro-one-param";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <1>;
        bindings
            = <&macro_param_1to1>
            , <&macro_press &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_LeftMiddy
            , <&macro_press &mo LAYER_LeftMiddy>
            #endif
            , <&macro_pause_for_release>
            , <&macro_param_1to1>
            , <&macro_release &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_LeftMiddy
            , <&macro_release &mo LAYER_LeftMiddy>
            #endif
            ;
    };
    left_middy_tap: homey_left_middy_tap {
        compatible = "zmk,behavior-macro-one-param";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <1>;
        bindings
            = <&macro_release
                &kp LSFT &kp RSFT
                &kp LALT &kp RALT
                &kp LCTL &kp RCTL
                &kp LGUI &kp RGUI>
            , <&macro_tap &kp LEFT_MIDDY_KEY>
            , <&macro_param_1to1>
            , <&macro_tap &kp MACRO_PLACEHOLDER>
            ;
    };
    #define LeftMiddy(key, layer_index) LeftMiddy_unroll(layer_index) (key)
    #define LeftMiddy_unroll(layer_index) LeftMiddy_concat(LeftMiddy_layer, layer_index)
    #define LeftMiddy_concat(prefix, layer_index) prefix ## layer_index
    #ifdef ENFORCE_BILATERAL
    #define left_middy_layer0_variant left_middy_bilateral
    #else
    #define left_middy_layer0_variant left_middy
    #endif
    #define LeftMiddy_layer0(key) left_middy_layer0_variant LEFT_MIDDY_MOD key
    #define LeftMiddy_layer1(key) left_middy LEFT_MIDDY_MOD key
    #define LeftMiddy_layer2(key) left_middy LEFT_MIDDY_MOD key
    #define LeftMiddy_layer3(key) left_middy LEFT_MIDDY_MOD key
    #define LeftMiddy_layer4(key) left_middy LEFT_MIDDY_MOD key
    #define LeftMiddy_layer5(key) left_middy LEFT_MIDDY_MOD key
    #define LeftMiddy_layer6(key) left_middy LEFT_MIDDY_MOD key
    #define LeftMiddy_layer7(key) left_middy LEFT_MIDDY_MOD key
    #define LeftMiddy_layer8(key) left_middy LEFT_MIDDY_MOD key
    #ifndef RIGHT_MIDDY_HOLDING_TYPE
    #define RIGHT_MIDDY_HOLDING_TYPE MIDDY_HOLDING_TYPE
    #endif
    #ifndef RIGHT_MIDDY_HOLDING_TIME
    #define RIGHT_MIDDY_HOLDING_TIME MIDDY_HOLDING_TIME
    #endif
    #ifndef RIGHT_MIDDY_STREAK_DECAY
    #define RIGHT_MIDDY_STREAK_DECAY MIDDY_STREAK_DECAY
    #endif
    #ifndef RIGHT_MIDDY_REPEAT_DECAY
    #define RIGHT_MIDDY_REPEAT_DECAY MIDDY_REPEAT_DECAY
    #endif
    right_middy: homey_right_middy {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_MIDDY_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    right_middy_bilateral: homey_right_middy_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_MIDDY_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&right_middy_hold>, <&kp>;
    };
    right_middy_hold: homey_right_middy_hold {
        compatible = "zmk,behavior-macro-one-param";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <1>;
        bindings
            = <&macro_param_1to1>
            , <&macro_press &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_RightMiddy
            , <&macro_press &mo LAYER_RightMiddy>
            #endif
            , <&macro_pause_for_release>
            , <&macro_param_1to1>
            , <&macro_release &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_RightMiddy
            , <&macro_release &mo LAYER_RightMiddy>
            #endif
            ;
    };
    right_middy_tap: homey_right_middy_tap {
        compatible = "zmk,behavior-macro-one-param";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <1>;
        bindings
            = <&macro_release
                &kp LSFT &kp RSFT
                &kp LALT &kp RALT
                &kp LCTL &kp RCTL
                &kp LGUI &kp RGUI>
            , <&macro_tap &kp RIGHT_MIDDY_KEY>
            , <&macro_param_1to1>
            , <&macro_tap &kp MACRO_PLACEHOLDER>
            ;
    };
    #define RightMiddy(key, layer_index) RightMiddy_unroll(layer_index) (key)
    #define RightMiddy_unroll(layer_index) RightMiddy_concat(RightMiddy_layer, layer_index)
    #define RightMiddy_concat(prefix, layer_index) prefix ## layer_index
    #ifdef ENFORCE_BILATERAL
    #define right_middy_layer0_variant right_middy_bilateral
    #else
    #define right_middy_layer0_variant right_middy
    #endif
    #define RightMiddy_layer0(key) right_middy_layer0_variant RIGHT_MIDDY_MOD key
    #define RightMiddy_layer1(key) right_middy RIGHT_MIDDY_MOD key
    #define RightMiddy_layer2(key) right_middy RIGHT_MIDDY_MOD key
    #define RightMiddy_layer3(key) right_middy RIGHT_MIDDY_MOD key
    #define RightMiddy_layer4(key) right_middy RIGHT_MIDDY_MOD key
    #define RightMiddy_layer5(key) right_middy RIGHT_MIDDY_MOD key
    #define RightMiddy_layer6(key) right_middy RIGHT_MIDDY_MOD key
    #define RightMiddy_layer7(key) right_middy RIGHT_MIDDY_MOD key
    #define RightMiddy_layer8(key) right_middy RIGHT_MIDDY_MOD key
    #ifndef LEFT_INDEX_HOLDING_TYPE
    #define LEFT_INDEX_HOLDING_TYPE INDEX_HOLDING_TYPE
    #endif
    #ifndef LEFT_INDEX_HOLDING_TIME
    #define LEFT_INDEX_HOLDING_TIME INDEX_HOLDING_TIME
    #endif
    #ifndef LEFT_INDEX_STREAK_DECAY
    #define LEFT_INDEX_STREAK_DECAY INDEX_STREAK_DECAY
    #endif
    #ifndef LEFT_INDEX_REPEAT_DECAY
    #define LEFT_INDEX_REPEAT_DECAY INDEX_REPEAT_DECAY
    #endif
    left_index: homey_left_index {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_INDEX_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
        quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    left_index_bilateral: homey_left_index_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_INDEX_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
        quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&left_index_hold>, <&kp>;
    };
    left_index_hold: homey_left_index_hold {
        compatible = "zmk,behavior-macro-one-param";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <1>;
        bindings
            = <&macro_param_1to1>
            , <&macro_press &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_LeftIndex
            , <&macro_press &mo LAYER_LeftIndex>
            #endif
            , <&macro_pause_for_release>
            , <&macro_param_1to1>
            , <&macro_release &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_LeftIndex
            , <&macro_release &mo LAYER_LeftIndex>
            #endif
            ;
    };
    left_index_tap: homey_left_index_tap {
        compatible = "zmk,behavior-macro-one-param";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <1>;
        bindings
            = <&macro_release
                &kp LSFT &kp RSFT
                &kp LALT &kp RALT
                &kp LCTL &kp RCTL
                &kp LGUI &kp RGUI>
            , <&macro_tap &kp LEFT_INDEX_KEY>
            , <&macro_param_1to1>
            , <&macro_tap &kp MACRO_PLACEHOLDER>
            ;
    };
    #define LeftIndex(key, layer_index) LeftIndex_unroll(layer_index) (key)
    #define LeftIndex_unroll(layer_index) LeftIndex_concat(LeftIndex_layer, layer_index)
    #define LeftIndex_concat(prefix, layer_index) prefix ## layer_index
    #ifdef ENFORCE_BILATERAL
    #define left_index_layer0_variant left_index_bilateral
    #else
    #define left_index_layer0_variant left_index
    #endif
    #define LeftIndex_layer0(key) left_index_layer0_variant LEFT_INDEX_MOD key
    #define LeftIndex_layer1(key) left_index LEFT_INDEX_MOD key
    #define LeftIndex_layer2(key) left_index LEFT_INDEX_MOD key
    #define LeftIndex_layer3(key) left_index LEFT_INDEX_MOD key
    #define LeftIndex_layer4(key) left_index LEFT_INDEX_MOD key
    #define LeftIndex_layer5(key) left_index LEFT_INDEX_MOD key
    #define LeftIndex_layer6(key) left_index LEFT_INDEX_MOD key
    #define LeftIndex_layer7(key) left_index LEFT_INDEX_MOD key
    #define LeftIndex_layer8(key) left_index LEFT_INDEX_MOD key
    #ifndef RIGHT_INDEX_HOLDING_TYPE
    #define RIGHT_INDEX_HOLDING_TYPE INDEX_HOLDING_TYPE
    #endif
    #ifndef RIGHT_INDEX_HOLDING_TIME
    #define RIGHT_INDEX_HOLDING_TIME INDEX_HOLDING_TIME
    #endif
    #ifndef RIGHT_INDEX_STREAK_DECAY
    #define RIGHT_INDEX_STREAK_DECAY INDEX_STREAK_DECAY
    #endif
    #ifndef RIGHT_INDEX_REPEAT_DECAY
    #define RIGHT_INDEX_REPEAT_DECAY INDEX_REPEAT_DECAY
    #endif
    right_index: homey_right_index {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_INDEX_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    right_index_bilateral: homey_right_index_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_INDEX_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&right_index_hold>, <&kp>;
    };
    right_index_hold: homey_right_index_hold {
        compatible = "zmk,behavior-macro-one-param";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <1>;
        bindings
            = <&macro_param_1to1>
            , <&macro_press &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_RightIndex
            , <&macro_press &mo LAYER_RightIndex>
            #endif
            , <&macro_pause_for_release>
            , <&macro_param_1to1>
            , <&macro_release &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_RightIndex
            , <&macro_release &mo LAYER_RightIndex>
            #endif
            ;
    };
    right_index_tap: homey_right_index_tap {
        compatible = "zmk,behavior-macro-one-param";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <1>;
        bindings
            = <&macro_release
                &kp LSFT &kp RSFT
                &kp LALT &kp RALT
                &kp LCTL &kp RCTL
                &kp LGUI &kp RGUI>
            , <&macro_tap &kp RIGHT_INDEX_KEY>
            , <&macro_param_1to1>
            , <&macro_tap &kp MACRO_PLACEHOLDER>
            ;
    };
    #define RightIndex(key, layer_index) RightIndex_unroll(layer_index) (key)
    #define RightIndex_unroll(layer_index) RightIndex_concat(RightIndex_layer, layer_index)
    #define RightIndex_concat(prefix, layer_index) prefix ## layer_index
    #ifdef ENFORCE_BILATERAL
    #define right_index_layer0_variant right_index_bilateral
    #else
    #define right_index_layer0_variant right_index
    #endif
    #define RightIndex_layer0(key) right_index_layer0_variant RIGHT_INDEX_MOD key
    #define RightIndex_layer1(key) right_index RIGHT_INDEX_MOD key
    #define RightIndex_layer2(key) right_index RIGHT_INDEX_MOD key
    #define RightIndex_layer3(key) right_index RIGHT_INDEX_MOD key
    #define RightIndex_layer4(key) right_index RIGHT_INDEX_MOD key
    #define RightIndex_layer5(key) right_index RIGHT_INDEX_MOD key
    #define RightIndex_layer6(key) right_index RIGHT_INDEX_MOD key
    #define RightIndex_layer7(key) right_index RIGHT_INDEX_MOD key
    #define RightIndex_layer8(key) right_index RIGHT_INDEX_MOD key
    #ifndef LEFT_RING1_PINKY_HOLDING_TYPE
    #define LEFT_RING1_PINKY_HOLDING_TYPE LEFT_RING1_CHORD_HOLDING_TYPE
    #endif
    #ifndef LEFT_RING1_PINKY_HOLDING_TIME
    #define LEFT_RING1_PINKY_HOLDING_TIME LEFT_RING1_CHORD_HOLDING_TIME
    #endif
    #ifndef LEFT_RING1_PINKY_STREAK_DECAY
    #define LEFT_RING1_PINKY_STREAK_DECAY LEFT_RING1_CHORD_STREAK_DECAY
    #endif
    #ifndef LEFT_RING1_PINKY_REPEAT_DECAY
    #define LEFT_RING1_PINKY_REPEAT_DECAY LEFT_RING1_CHORD_REPEAT_DECAY
    #endif
    left_ring1_pinky: homey_left_ring1_pinky {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_RING1_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_RING1_HOLDING_TIME>;
        quick-tap-ms = <LEFT_RING1_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_RING1_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    left_ring1_pinky_bilateral: homey_left_ring1_pinky_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_RING1_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_RING1_HOLDING_TIME>;
        quick-tap-ms = <LEFT_RING1_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_RING1_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&left_ring1_tap>;
    };
    #define LeftRing1Pinky left_ring1_pinky_bilateral LEFT_PINKY_MOD LEFT_PINKY_KEY
    #ifndef LEFT_RING2_PINKY_HOLDING_TYPE
    #define LEFT_RING2_PINKY_HOLDING_TYPE LEFT_RING2_CHORD_HOLDING_TYPE
    #endif
    #ifndef LEFT_RING2_PINKY_HOLDING_TIME
    #define LEFT_RING2_PINKY_HOLDING_TIME LEFT_RING2_CHORD_HOLDING_TIME
    #endif
    #ifndef LEFT_RING2_PINKY_STREAK_DECAY
    #define LEFT_RING2_PINKY_STREAK_DECAY LEFT_RING2_CHORD_STREAK_DECAY
    #endif
    #ifndef LEFT_RING2_PINKY_REPEAT_DECAY
    #define LEFT_RING2_PINKY_REPEAT_DECAY LEFT_RING2_CHORD_REPEAT_DECAY
    #endif
    left_ring2_pinky: homey_left_ring2_pinky {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_RING2_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_RING2_HOLDING_TIME>;
        quick-tap-ms = <LEFT_RING2_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_RING2_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    left_ring2_pinky_bilateral: homey_left_ring2_pinky_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_RING2_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_RING2_HOLDING_TIME>;
        quick-tap-ms = <LEFT_RING2_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_RING2_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&left_ring2_tap>;
    };
    #define LeftRing2Pinky left_ring2_pinky_bilateral LEFT_PINKY_MOD LEFT_PINKY_KEY
    #ifndef LEFT_MIDDY_PINKY_HOLDING_TYPE
    #define LEFT_MIDDY_PINKY_HOLDING_TYPE LEFT_MIDDY_CHORD_HOLDING_TYPE
    #endif
    #ifndef LEFT_MIDDY_PINKY_HOLDING_TIME
    #define LEFT_MIDDY_PINKY_HOLDING_TIME LEFT_MIDDY_CHORD_HOLDING_TIME
    #endif
    #ifndef LEFT_MIDDY_PINKY_STREAK_DECAY
    #define LEFT_MIDDY_PINKY_STREAK_DECAY LEFT_MIDDY_CHORD_STREAK_DECAY
    #endif
    #ifndef LEFT_MIDDY_PINKY_REPEAT_DECAY
    #define LEFT_MIDDY_PINKY_REPEAT_DECAY LEFT_MIDDY_CHORD_REPEAT_DECAY
    #endif
    left_middy_pinky: homey_left_middy_pinky {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_MIDDY_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
        quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    left_middy_pinky_bilateral: homey_left_middy_pinky_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_MIDDY_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
        quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&left_middy_tap>;
    };
    #define LeftMiddyPinky left_middy_pinky_bilateral LEFT_PINKY_MOD LEFT_PINKY_KEY
    #ifndef LEFT_INDEX_PINKY_HOLDING_TYPE
    #define LEFT_INDEX_PINKY_HOLDING_TYPE LEFT_INDEX_CHORD_HOLDING_TYPE
    #endif
    #ifndef LEFT_INDEX_PINKY_HOLDING_TIME
    #define LEFT_INDEX_PINKY_HOLDING_TIME LEFT_INDEX_CHORD_HOLDING_TIME
    #endif
    #ifndef LEFT_INDEX_PINKY_STREAK_DECAY
    #define LEFT_INDEX_PINKY_STREAK_DECAY LEFT_INDEX_CHORD_STREAK_DECAY
    #endif
    #ifndef LEFT_INDEX_PINKY_REPEAT_DECAY
    #define LEFT_INDEX_PINKY_REPEAT_DECAY LEFT_INDEX_CHORD_REPEAT_DECAY
    #endif
    left_index_pinky: homey_left_index_pinky {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_INDEX_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
        quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    left_index_pinky_bilateral: homey_left_index_pinky_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_INDEX_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
        quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&left_index_tap>;
    };
    #define LeftIndexPinky left_index_pinky_bilateral LEFT_PINKY_MOD LEFT_PINKY_KEY
    #ifndef RIGHT_RING1_PINKY_HOLDING_TYPE
    #define RIGHT_RING1_PINKY_HOLDING_TYPE RIGHT_RING1_CHORD_HOLDING_TYPE
    #endif
    #ifndef RIGHT_RING1_PINKY_HOLDING_TIME
    #define RIGHT_RING1_PINKY_HOLDING_TIME RIGHT_RING1_CHORD_HOLDING_TIME
    #endif
    #ifndef RIGHT_RING1_PINKY_STREAK_DECAY
    #define RIGHT_RING1_PINKY_STREAK_DECAY RIGHT_RING1_CHORD_STREAK_DECAY
    #endif
    #ifndef RIGHT_RING1_PINKY_REPEAT_DECAY
    #define RIGHT_RING1_PINKY_REPEAT_DECAY RIGHT_RING1_CHORD_REPEAT_DECAY
    #endif
    right_ring1_pinky: homey_right_ring1_pinky {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_RING1_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_RING1_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_RING1_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_RING1_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    right_ring1_pinky_bilateral: homey_right_ring1_pinky_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_RING1_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_RING1_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_RING1_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_RING1_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&right_ring1_tap>;
    };
    #define RightRing1Pinky right_ring1_pinky_bilateral RIGHT_PINKY_MOD RIGHT_PINKY_KEY
    #ifndef RIGHT_RING2_PINKY_HOLDING_TYPE
    #define RIGHT_RING2_PINKY_HOLDING_TYPE RIGHT_RING2_CHORD_HOLDING_TYPE
    #endif
    #ifndef RIGHT_RING2_PINKY_HOLDING_TIME
    #define RIGHT_RING2_PINKY_HOLDING_TIME RIGHT_RING2_CHORD_HOLDING_TIME
    #endif
    #ifndef RIGHT_RING2_PINKY_STREAK_DECAY
    #define RIGHT_RING2_PINKY_STREAK_DECAY RIGHT_RING2_CHORD_STREAK_DECAY
    #endif
    #ifndef RIGHT_RING2_PINKY_REPEAT_DECAY
    #define RIGHT_RING2_PINKY_REPEAT_DECAY RIGHT_RING2_CHORD_REPEAT_DECAY
    #endif
    right_ring2_pinky: homey_right_ring2_pinky {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_RING2_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_RING2_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_RING2_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_RING2_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    right_ring2_pinky_bilateral: homey_right_ring2_pinky_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_RING2_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_RING2_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_RING2_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_RING2_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&right_ring2_tap>;
    };
    #define RightRing2Pinky right_ring2_pinky_bilateral RIGHT_PINKY_MOD RIGHT_PINKY_KEY
    #ifndef RIGHT_MIDDY_PINKY_HOLDING_TYPE
    #define RIGHT_MIDDY_PINKY_HOLDING_TYPE RIGHT_MIDDY_CHORD_HOLDING_TYPE
    #endif
    #ifndef RIGHT_MIDDY_PINKY_HOLDING_TIME
    #define RIGHT_MIDDY_PINKY_HOLDING_TIME RIGHT_MIDDY_CHORD_HOLDING_TIME
    #endif
    #ifndef RIGHT_MIDDY_PINKY_STREAK_DECAY
    #define RIGHT_MIDDY_PINKY_STREAK_DECAY RIGHT_MIDDY_CHORD_STREAK_DECAY
    #endif
    #ifndef RIGHT_MIDDY_PINKY_REPEAT_DECAY
    #define RIGHT_MIDDY_PINKY_REPEAT_DECAY RIGHT_MIDDY_CHORD_REPEAT_DECAY
    #endif
    right_middy_pinky: homey_right_middy_pinky {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_MIDDY_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    right_middy_pinky_bilateral: homey_right_middy_pinky_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_MIDDY_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&right_middy_tap>;
    };
    #define RightMiddyPinky right_middy_pinky_bilateral RIGHT_PINKY_MOD RIGHT_PINKY_KEY
    #ifndef RIGHT_INDEX_PINKY_HOLDING_TYPE
    #define RIGHT_INDEX_PINKY_HOLDING_TYPE RIGHT_INDEX_CHORD_HOLDING_TYPE
    #endif
    #ifndef RIGHT_INDEX_PINKY_HOLDING_TIME
    #define RIGHT_INDEX_PINKY_HOLDING_TIME RIGHT_INDEX_CHORD_HOLDING_TIME
    #endif
    #ifndef RIGHT_INDEX_PINKY_STREAK_DECAY
    #define RIGHT_INDEX_PINKY_STREAK_DECAY RIGHT_INDEX_CHORD_STREAK_DECAY
    #endif
    #ifndef RIGHT_INDEX_PINKY_REPEAT_DECAY
    #define RIGHT_INDEX_PINKY_REPEAT_DECAY RIGHT_INDEX_CHORD_REPEAT_DECAY
    #endif
    right_index_pinky: homey_right_index_pinky {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_INDEX_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    right_index_pinky_bilateral: homey_right_index_pinky_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_INDEX_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&right_index_tap>;
    };
    #define RightIndexPinky right_index_pinky_bilateral RIGHT_PINKY_MOD RIGHT_PINKY_KEY
    #ifndef LEFT_PINKY_RING1_HOLDING_TYPE
    #define LEFT_PINKY_RING1_HOLDING_TYPE LEFT_PINKY_CHORD_HOLDING_TYPE
    #endif
    #ifndef LEFT_PINKY_RING1_HOLDING_TIME
    #define LEFT_PINKY_RING1_HOLDING_TIME LEFT_PINKY_CHORD_HOLDING_TIME
    #endif
    #ifndef LEFT_PINKY_RING1_STREAK_DECAY
    #define LEFT_PINKY_RING1_STREAK_DECAY LEFT_PINKY_CHORD_STREAK_DECAY
    #endif
    #ifndef LEFT_PINKY_RING1_REPEAT_DECAY
    #define LEFT_PINKY_RING1_REPEAT_DECAY LEFT_PINKY_CHORD_REPEAT_DECAY
    #endif
    left_pinky_ring1: homey_left_pinky_ring1 {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_PINKY_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
        quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    left_pinky_ring1_bilateral: homey_left_pinky_ring1_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_PINKY_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
        quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&left_pinky_tap>;
    };
    #define LeftPinkyRing1 left_pinky_ring1_bilateral LEFT_RING1_MOD LEFT_RING1_KEY
    #ifndef LEFT_RING2_RING1_HOLDING_TYPE
    #define LEFT_RING2_RING1_HOLDING_TYPE LEFT_RING2_CHORD_HOLDING_TYPE
    #endif
    #ifndef LEFT_RING2_RING1_HOLDING_TIME
    #define LEFT_RING2_RING1_HOLDING_TIME LEFT_RING2_CHORD_HOLDING_TIME
    #endif
    #ifndef LEFT_RING2_RING1_STREAK_DECAY
    #define LEFT_RING2_RING1_STREAK_DECAY LEFT_RING2_CHORD_STREAK_DECAY
    #endif
    #ifndef LEFT_RING2_RING1_REPEAT_DECAY
    #define LEFT_RING2_RING1_REPEAT_DECAY LEFT_RING2_CHORD_REPEAT_DECAY
    #endif
    left_ring2_ring1: homey_left_ring2_ring1 {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_RING2_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_RING2_HOLDING_TIME>;
        quick-tap-ms = <LEFT_RING2_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_RING2_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    left_ring2_ring1_bilateral: homey_left_ring2_ring1_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_RING2_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_RING2_HOLDING_TIME>;
        quick-tap-ms = <LEFT_RING2_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_RING2_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&left_ring2_tap>;
    };
    #define LeftRing2Ring1 left_ring2_ring1_bilateral LEFT_RING1_MOD LEFT_RING1_KEY
    #ifndef LEFT_MIDDY_RING1_HOLDING_TYPE
    #define LEFT_MIDDY_RING1_HOLDING_TYPE LEFT_MIDDY_CHORD_HOLDING_TYPE
    #endif
    #ifndef LEFT_MIDDY_RING1_HOLDING_TIME
    #define LEFT_MIDDY_RING1_HOLDING_TIME LEFT_MIDDY_CHORD_HOLDING_TIME
    #endif
    #ifndef LEFT_MIDDY_RING1_STREAK_DECAY
    #define LEFT_MIDDY_RING1_STREAK_DECAY LEFT_MIDDY_CHORD_STREAK_DECAY
    #endif
    #ifndef LEFT_MIDDY_RING1_REPEAT_DECAY
    #define LEFT_MIDDY_RING1_REPEAT_DECAY LEFT_MIDDY_CHORD_REPEAT_DECAY
    #endif
    left_middy_ring1: homey_left_middy_ring1 {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_MIDDY_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
        quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    left_middy_ring1_bilateral: homey_left_middy_ring1_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_MIDDY_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
        quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&left_middy_tap>;
    };
    #define LeftMiddyRing1 left_middy_ring1_bilateral LEFT_RING1_MOD LEFT_RING1_KEY
    #ifndef LEFT_INDEX_RING1_HOLDING_TYPE
    #define LEFT_INDEX_RING1_HOLDING_TYPE LEFT_INDEX_CHORD_HOLDING_TYPE
    #endif
    #ifndef LEFT_INDEX_RING1_HOLDING_TIME
    #define LEFT_INDEX_RING1_HOLDING_TIME LEFT_INDEX_CHORD_HOLDING_TIME
    #endif
    #ifndef LEFT_INDEX_RING1_STREAK_DECAY
    #define LEFT_INDEX_RING1_STREAK_DECAY LEFT_INDEX_CHORD_STREAK_DECAY
    #endif
    #ifndef LEFT_INDEX_RING1_REPEAT_DECAY
    #define LEFT_INDEX_RING1_REPEAT_DECAY LEFT_INDEX_CHORD_REPEAT_DECAY
    #endif
    left_index_ring1: homey_left_index_ring1 {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_INDEX_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
        quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    left_index_ring1_bilateral: homey_left_index_ring1_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_INDEX_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
        quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&left_index_tap>;
    };
    #define LeftIndexRing1 left_index_ring1_bilateral LEFT_RING1_MOD LEFT_RING1_KEY
    #ifndef RIGHT_PINKY_RING1_HOLDING_TYPE
    #define RIGHT_PINKY_RING1_HOLDING_TYPE RIGHT_PINKY_CHORD_HOLDING_TYPE
    #endif
    #ifndef RIGHT_PINKY_RING1_HOLDING_TIME
    #define RIGHT_PINKY_RING1_HOLDING_TIME RIGHT_PINKY_CHORD_HOLDING_TIME
    #endif
    #ifndef RIGHT_PINKY_RING1_STREAK_DECAY
    #define RIGHT_PINKY_RING1_STREAK_DECAY RIGHT_PINKY_CHORD_STREAK_DECAY
    #endif
    #ifndef RIGHT_PINKY_RING1_REPEAT_DECAY
    #define RIGHT_PINKY_RING1_REPEAT_DECAY RIGHT_PINKY_CHORD_REPEAT_DECAY
    #endif
    right_pinky_ring1: homey_right_pinky_ring1 {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_PINKY_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    right_pinky_ring1_bilateral: homey_right_pinky_ring1_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_PINKY_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&right_pinky_tap>;
    };
    #define RightPinkyRing1 right_pinky_ring1_bilateral RIGHT_RING1_MOD RIGHT_RING1_KEY
    #ifndef RIGHT_RING2_RING1_HOLDING_TYPE
    #define RIGHT_RING2_RING1_HOLDING_TYPE RIGHT_RING2_CHORD_HOLDING_TYPE
    #endif
    #ifndef RIGHT_RING2_RING1_HOLDING_TIME
    #define RIGHT_RING2_RING1_HOLDING_TIME RIGHT_RING2_CHORD_HOLDING_TIME
    #endif
    #ifndef RIGHT_RING2_RING1_STREAK_DECAY
    #define RIGHT_RING2_RING1_STREAK_DECAY RIGHT_RING2_CHORD_STREAK_DECAY
    #endif
    #ifndef RIGHT_RING2_RING1_REPEAT_DECAY
    #define RIGHT_RING2_RING1_REPEAT_DECAY RIGHT_RING2_CHORD_REPEAT_DECAY
    #endif
    right_ring2_ring1: homey_right_ring2_ring1 {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_RING2_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_RING2_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_RING2_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_RING2_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    right_ring2_ring1_bilateral: homey_right_ring2_ring1_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_RING2_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_RING2_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_RING2_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_RING2_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&right_ring2_tap>;
    };
    #define RightRing2Ring1 right_ring2_ring1_bilateral RIGHT_RING1_MOD RIGHT_RING1_KEY
    #ifndef RIGHT_MIDDY_RING1_HOLDING_TYPE
    #define RIGHT_MIDDY_RING1_HOLDING_TYPE RIGHT_MIDDY_CHORD_HOLDING_TYPE
    #endif
    #ifndef RIGHT_MIDDY_RING1_HOLDING_TIME
    #define RIGHT_MIDDY_RING1_HOLDING_TIME RIGHT_MIDDY_CHORD_HOLDING_TIME
    #endif
    #ifndef RIGHT_MIDDY_RING1_STREAK_DECAY
    #define RIGHT_MIDDY_RING1_STREAK_DECAY RIGHT_MIDDY_CHORD_STREAK_DECAY
    #endif
    #ifndef RIGHT_MIDDY_RING1_REPEAT_DECAY
    #define RIGHT_MIDDY_RING1_REPEAT_DECAY RIGHT_MIDDY_CHORD_REPEAT_DECAY
    #endif
    right_middy_ring1: homey_right_middy_ring1 {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_MIDDY_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    right_middy_ring1_bilateral: homey_right_middy_ring1_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_MIDDY_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&right_middy_tap>;
    };
    #define RightMiddyRing1 right_middy_ring1_bilateral RIGHT_RING1_MOD RIGHT_RING1_KEY
    #ifndef RIGHT_INDEX_RING1_HOLDING_TYPE
    #define RIGHT_INDEX_RING1_HOLDING_TYPE RIGHT_INDEX_CHORD_HOLDING_TYPE
    #endif
    #ifndef RIGHT_INDEX_RING1_HOLDING_TIME
    #define RIGHT_INDEX_RING1_HOLDING_TIME RIGHT_INDEX_CHORD_HOLDING_TIME
    #endif
    #ifndef RIGHT_INDEX_RING1_STREAK_DECAY
    #define RIGHT_INDEX_RING1_STREAK_DECAY RIGHT_INDEX_CHORD_STREAK_DECAY
    #endif
    #ifndef RIGHT_INDEX_RING1_REPEAT_DECAY
    #define RIGHT_INDEX_RING1_REPEAT_DECAY RIGHT_INDEX_CHORD_REPEAT_DECAY
    #endif
    right_index_ring1: homey_right_index_ring1 {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_INDEX_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    right_index_ring1_bilateral: homey_right_index_ring1_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_INDEX_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&right_index_tap>;
    };
    #define RightIndexRing1 right_index_ring1_bilateral RIGHT_RING1_MOD RIGHT_RING1_KEY
    #ifndef LEFT_PINKY_RING2_HOLDING_TYPE
    #define LEFT_PINKY_RING2_HOLDING_TYPE LEFT_PINKY_CHORD_HOLDING_TYPE
    #endif
    #ifndef LEFT_PINKY_RING2_HOLDING_TIME
    #define LEFT_PINKY_RING2_HOLDING_TIME LEFT_PINKY_CHORD_HOLDING_TIME
    #endif
    #ifndef LEFT_PINKY_RING2_STREAK_DECAY
    #define LEFT_PINKY_RING2_STREAK_DECAY LEFT_PINKY_CHORD_STREAK_DECAY
    #endif
    #ifndef LEFT_PINKY_RING2_REPEAT_DECAY
    #define LEFT_PINKY_RING2_REPEAT_DECAY LEFT_PINKY_CHORD_REPEAT_DECAY
    #endif
    left_pinky_ring2: homey_left_pinky_ring2 {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_PINKY_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
        quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    left_pinky_ring2_bilateral: homey_left_pinky_ring2_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_PINKY_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
        quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&left_pinky_tap>;
    };
    #define LeftPinkyRing2 left_pinky_ring2_bilateral LEFT_RING2_MOD LEFT_RING2_KEY
    #ifndef LEFT_RING1_RING2_HOLDING_TYPE
    #define LEFT_RING1_RING2_HOLDING_TYPE LEFT_RING1_CHORD_HOLDING_TYPE
    #endif
    #ifndef LEFT_RING1_RING2_HOLDING_TIME
    #define LEFT_RING1_RING2_HOLDING_TIME LEFT_RING1_CHORD_HOLDING_TIME
    #endif
    #ifndef LEFT_RING1_RING2_STREAK_DECAY
    #define LEFT_RING1_RING2_STREAK_DECAY LEFT_RING1_CHORD_STREAK_DECAY
    #endif
    #ifndef LEFT_RING1_RING2_REPEAT_DECAY
    #define LEFT_RING1_RING2_REPEAT_DECAY LEFT_RING1_CHORD_REPEAT_DECAY
    #endif
    left_ring1_ring2: homey_left_ring1_ring2 {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_RING1_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_RING1_HOLDING_TIME>;
        quick-tap-ms = <LEFT_RING1_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_RING1_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    left_ring1_ring2_bilateral: homey_left_ring1_ring2_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_RING1_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_RING1_HOLDING_TIME>;
        quick-tap-ms = <LEFT_RING1_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_RING1_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&left_ring1_tap>;
    };
    #define LeftRing1Ring2 left_ring1_ring2_bilateral LEFT_RING2_MOD LEFT_RING2_KEY
    #ifndef LEFT_MIDDY_RING2_HOLDING_TYPE
    #define LEFT_MIDDY_RING2_HOLDING_TYPE LEFT_MIDDY_CHORD_HOLDING_TYPE
    #endif
    #ifndef LEFT_MIDDY_RING2_HOLDING_TIME
    #define LEFT_MIDDY_RING2_HOLDING_TIME LEFT_MIDDY_CHORD_HOLDING_TIME
    #endif
    #ifndef LEFT_MIDDY_RING2_STREAK_DECAY
    #define LEFT_MIDDY_RING2_STREAK_DECAY LEFT_MIDDY_CHORD_STREAK_DECAY
    #endif
    #ifndef LEFT_MIDDY_RING2_REPEAT_DECAY
    #define LEFT_MIDDY_RING2_REPEAT_DECAY LEFT_MIDDY_CHORD_REPEAT_DECAY
    #endif
    left_middy_ring2: homey_left_middy_ring2 {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_MIDDY_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
        quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    left_middy_ring2_bilateral: homey_left_middy_ring2_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_MIDDY_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
        quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&left_middy_tap>;
    };
    #define LeftMiddyRing2 left_middy_ring2_bilateral LEFT_RING2_MOD LEFT_RING2_KEY
    #ifndef LEFT_INDEX_RING2_HOLDING_TYPE
    #define LEFT_INDEX_RING2_HOLDING_TYPE LEFT_INDEX_CHORD_HOLDING_TYPE
    #endif
    #ifndef LEFT_INDEX_RING2_HOLDING_TIME
    #define LEFT_INDEX_RING2_HOLDING_TIME LEFT_INDEX_CHORD_HOLDING_TIME
    #endif
    #ifndef LEFT_INDEX_RING2_STREAK_DECAY
    #define LEFT_INDEX_RING2_STREAK_DECAY LEFT_INDEX_CHORD_STREAK_DECAY
    #endif
    #ifndef LEFT_INDEX_RING2_REPEAT_DECAY
    #define LEFT_INDEX_RING2_REPEAT_DECAY LEFT_INDEX_CHORD_REPEAT_DECAY
    #endif
    left_index_ring2: homey_left_index_ring2 {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_INDEX_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
        quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    left_index_ring2_bilateral: homey_left_index_ring2_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_INDEX_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
        quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&left_index_tap>;
    };
    #define LeftIndexRing2 left_index_ring2_bilateral LEFT_RING2_MOD LEFT_RING2_KEY
    #ifndef RIGHT_PINKY_RING2_HOLDING_TYPE
    #define RIGHT_PINKY_RING2_HOLDING_TYPE RIGHT_PINKY_CHORD_HOLDING_TYPE
    #endif
    #ifndef RIGHT_PINKY_RING2_HOLDING_TIME
    #define RIGHT_PINKY_RING2_HOLDING_TIME RIGHT_PINKY_CHORD_HOLDING_TIME
    #endif
    #ifndef RIGHT_PINKY_RING2_STREAK_DECAY
    #define RIGHT_PINKY_RING2_STREAK_DECAY RIGHT_PINKY_CHORD_STREAK_DECAY
    #endif
    #ifndef RIGHT_PINKY_RING2_REPEAT_DECAY
    #define RIGHT_PINKY_RING2_REPEAT_DECAY RIGHT_PINKY_CHORD_REPEAT_DECAY
    #endif
    right_pinky_ring2: homey_right_pinky_ring2 {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_PINKY_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    right_pinky_ring2_bilateral: homey_right_pinky_ring2_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_PINKY_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&right_pinky_tap>;
    };
    #define RightPinkyRing2 right_pinky_ring2_bilateral RIGHT_RING2_MOD RIGHT_RING2_KEY
    #ifndef RIGHT_RING1_RING2_HOLDING_TYPE
    #define RIGHT_RING1_RING2_HOLDING_TYPE RIGHT_RING1_CHORD_HOLDING_TYPE
    #endif
    #ifndef RIGHT_RING1_RING2_HOLDING_TIME
    #define RIGHT_RING1_RING2_HOLDING_TIME RIGHT_RING1_CHORD_HOLDING_TIME
    #endif
    #ifndef RIGHT_RING1_RING2_STREAK_DECAY
    #define RIGHT_RING1_RING2_STREAK_DECAY RIGHT_RING1_CHORD_STREAK_DECAY
    #endif
    #ifndef RIGHT_RING1_RING2_REPEAT_DECAY
    #define RIGHT_RING1_RING2_REPEAT_DECAY RIGHT_RING1_CHORD_REPEAT_DECAY
    #endif
    right_ring1_ring2: homey_right_ring1_ring2 {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_RING1_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_RING1_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_RING1_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_RING1_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    right_ring1_ring2_bilateral: homey_right_ring1_ring2_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_RING1_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_RING1_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_RING1_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_RING1_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&right_ring1_tap>;
    };
    #define RightRing1Ring2 right_ring1_ring2_bilateral RIGHT_RING2_MOD RIGHT_RING2_KEY
    #ifndef RIGHT_MIDDY_RING2_HOLDING_TYPE
    #define RIGHT_MIDDY_RING2_HOLDING_TYPE RIGHT_MIDDY_CHORD_HOLDING_TYPE
    #endif
    #ifndef RIGHT_MIDDY_RING2_HOLDING_TIME
    #define RIGHT_MIDDY_RING2_HOLDING_TIME RIGHT_MIDDY_CHORD_HOLDING_TIME
    #endif
    #ifndef RIGHT_MIDDY_RING2_STREAK_DECAY
    #define RIGHT_MIDDY_RING2_STREAK_DECAY RIGHT_MIDDY_CHORD_STREAK_DECAY
    #endif
    #ifndef RIGHT_MIDDY_RING2_REPEAT_DECAY
    #define RIGHT_MIDDY_RING2_REPEAT_DECAY RIGHT_MIDDY_CHORD_REPEAT_DECAY
    #endif
    right_middy_ring2: homey_right_middy_ring2 {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_MIDDY_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    right_middy_ring2_bilateral: homey_right_middy_ring2_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_MIDDY_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&right_middy_tap>;
    };
    #define RightMiddyRing2 right_middy_ring2_bilateral RIGHT_RING2_MOD RIGHT_RING2_KEY
    #ifndef RIGHT_INDEX_RING2_HOLDING_TYPE
    #define RIGHT_INDEX_RING2_HOLDING_TYPE RIGHT_INDEX_CHORD_HOLDING_TYPE
    #endif
    #ifndef RIGHT_INDEX_RING2_HOLDING_TIME
    #define RIGHT_INDEX_RING2_HOLDING_TIME RIGHT_INDEX_CHORD_HOLDING_TIME
    #endif
    #ifndef RIGHT_INDEX_RING2_STREAK_DECAY
    #define RIGHT_INDEX_RING2_STREAK_DECAY RIGHT_INDEX_CHORD_STREAK_DECAY
    #endif
    #ifndef RIGHT_INDEX_RING2_REPEAT_DECAY
    #define RIGHT_INDEX_RING2_REPEAT_DECAY RIGHT_INDEX_CHORD_REPEAT_DECAY
    #endif
    right_index_ring2: homey_right_index_ring2 {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_INDEX_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    right_index_ring2_bilateral: homey_right_index_ring2_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_INDEX_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&right_index_tap>;
    };
    #define RightIndexRing2 right_index_ring2_bilateral RIGHT_RING2_MOD RIGHT_RING2_KEY
    #ifndef LEFT_PINKY_MIDDY_HOLDING_TYPE
    #define LEFT_PINKY_MIDDY_HOLDING_TYPE LEFT_PINKY_CHORD_HOLDING_TYPE
    #endif
    #ifndef LEFT_PINKY_MIDDY_HOLDING_TIME
    #define LEFT_PINKY_MIDDY_HOLDING_TIME LEFT_PINKY_CHORD_HOLDING_TIME
    #endif
    #ifndef LEFT_PINKY_MIDDY_STREAK_DECAY
    #define LEFT_PINKY_MIDDY_STREAK_DECAY LEFT_PINKY_CHORD_STREAK_DECAY
    #endif
    #ifndef LEFT_PINKY_MIDDY_REPEAT_DECAY
    #define LEFT_PINKY_MIDDY_REPEAT_DECAY LEFT_PINKY_CHORD_REPEAT_DECAY
    #endif
    left_pinky_middy: homey_left_pinky_middy {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_PINKY_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
        quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    left_pinky_middy_bilateral: homey_left_pinky_middy_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_PINKY_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
        quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&left_pinky_tap>;
    };
    #define LeftPinkyMiddy left_pinky_middy_bilateral LEFT_MIDDY_MOD LEFT_MIDDY_KEY
    #ifndef LEFT_RING1_MIDDY_HOLDING_TYPE
    #define LEFT_RING1_MIDDY_HOLDING_TYPE LEFT_RING1_CHORD_HOLDING_TYPE
    #endif
    #ifndef LEFT_RING1_MIDDY_HOLDING_TIME
    #define LEFT_RING1_MIDDY_HOLDING_TIME LEFT_RING1_CHORD_HOLDING_TIME
    #endif
    #ifndef LEFT_RING1_MIDDY_STREAK_DECAY
    #define LEFT_RING1_MIDDY_STREAK_DECAY LEFT_RING1_CHORD_STREAK_DECAY
    #endif
    #ifndef LEFT_RING1_MIDDY_REPEAT_DECAY
    #define LEFT_RING1_MIDDY_REPEAT_DECAY LEFT_RING1_CHORD_REPEAT_DECAY
    #endif
    left_ring1_middy: homey_left_ring1_middy {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_RING1_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_RING1_HOLDING_TIME>;
        quick-tap-ms = <LEFT_RING1_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_RING1_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    left_ring1_middy_bilateral: homey_left_ring1_middy_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_RING1_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_RING1_HOLDING_TIME>;
        quick-tap-ms = <LEFT_RING1_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_RING1_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&left_ring1_tap>;
    };
    #define LeftRing1Middy left_ring1_middy_bilateral LEFT_MIDDY_MOD LEFT_MIDDY_KEY
    #ifndef LEFT_RING2_MIDDY_HOLDING_TYPE
    #define LEFT_RING2_MIDDY_HOLDING_TYPE LEFT_RING2_CHORD_HOLDING_TYPE
    #endif
    #ifndef LEFT_RING2_MIDDY_HOLDING_TIME
    #define LEFT_RING2_MIDDY_HOLDING_TIME LEFT_RING2_CHORD_HOLDING_TIME
    #endif
    #ifndef LEFT_RING2_MIDDY_STREAK_DECAY
    #define LEFT_RING2_MIDDY_STREAK_DECAY LEFT_RING2_CHORD_STREAK_DECAY
    #endif
    #ifndef LEFT_RING2_MIDDY_REPEAT_DECAY
    #define LEFT_RING2_MIDDY_REPEAT_DECAY LEFT_RING2_CHORD_REPEAT_DECAY
    #endif
    left_ring2_middy: homey_left_ring2_middy {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_RING2_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_RING2_HOLDING_TIME>;
        quick-tap-ms = <LEFT_RING2_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_RING2_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    left_ring2_middy_bilateral: homey_left_ring2_middy_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_RING2_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_RING2_HOLDING_TIME>;
        quick-tap-ms = <LEFT_RING2_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_RING2_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&left_ring2_tap>;
    };
    #define LeftRing2Middy left_ring2_middy_bilateral LEFT_MIDDY_MOD LEFT_MIDDY_KEY
    #ifndef LEFT_INDEX_MIDDY_HOLDING_TYPE
    #define LEFT_INDEX_MIDDY_HOLDING_TYPE LEFT_INDEX_CHORD_HOLDING_TYPE
    #endif
    #ifndef LEFT_INDEX_MIDDY_HOLDING_TIME
    #define LEFT_INDEX_MIDDY_HOLDING_TIME LEFT_INDEX_CHORD_HOLDING_TIME
    #endif
    #ifndef LEFT_INDEX_MIDDY_STREAK_DECAY
    #define LEFT_INDEX_MIDDY_STREAK_DECAY LEFT_INDEX_CHORD_STREAK_DECAY
    #endif
    #ifndef LEFT_INDEX_MIDDY_REPEAT_DECAY
    #define LEFT_INDEX_MIDDY_REPEAT_DECAY LEFT_INDEX_CHORD_REPEAT_DECAY
    #endif
    left_index_middy: homey_left_index_middy {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_INDEX_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
        quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    left_index_middy_bilateral: homey_left_index_middy_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_INDEX_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
        quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&left_index_tap>;
    };
    #define LeftIndexMiddy left_index_middy_bilateral LEFT_MIDDY_MOD LEFT_MIDDY_KEY
    #ifndef RIGHT_PINKY_MIDDY_HOLDING_TYPE
    #define RIGHT_PINKY_MIDDY_HOLDING_TYPE RIGHT_PINKY_CHORD_HOLDING_TYPE
    #endif
    #ifndef RIGHT_PINKY_MIDDY_HOLDING_TIME
    #define RIGHT_PINKY_MIDDY_HOLDING_TIME RIGHT_PINKY_CHORD_HOLDING_TIME
    #endif
    #ifndef RIGHT_PINKY_MIDDY_STREAK_DECAY
    #define RIGHT_PINKY_MIDDY_STREAK_DECAY RIGHT_PINKY_CHORD_STREAK_DECAY
    #endif
    #ifndef RIGHT_PINKY_MIDDY_REPEAT_DECAY
    #define RIGHT_PINKY_MIDDY_REPEAT_DECAY RIGHT_PINKY_CHORD_REPEAT_DECAY
    #endif
    right_pinky_middy: homey_right_pinky_middy {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_PINKY_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    right_pinky_middy_bilateral: homey_right_pinky_middy_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_PINKY_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&right_pinky_tap>;
    };
    #define RightPinkyMiddy right_pinky_middy_bilateral RIGHT_MIDDY_MOD RIGHT_MIDDY_KEY
    #ifndef RIGHT_RING1_MIDDY_HOLDING_TYPE
    #define RIGHT_RING1_MIDDY_HOLDING_TYPE RIGHT_RING1_CHORD_HOLDING_TYPE
    #endif
    #ifndef RIGHT_RING1_MIDDY_HOLDING_TIME
    #define RIGHT_RING1_MIDDY_HOLDING_TIME RIGHT_RING1_CHORD_HOLDING_TIME
    #endif
    #ifndef RIGHT_RING1_MIDDY_STREAK_DECAY
    #define RIGHT_RING1_MIDDY_STREAK_DECAY RIGHT_RING1_CHORD_STREAK_DECAY
    #endif
    #ifndef RIGHT_RING1_MIDDY_REPEAT_DECAY
    #define RIGHT_RING1_MIDDY_REPEAT_DECAY RIGHT_RING1_CHORD_REPEAT_DECAY
    #endif
    right_ring1_middy: homey_right_ring1_middy {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_RING1_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_RING1_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_RING1_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_RING1_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    right_ring1_middy_bilateral: homey_right_ring1_middy_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_RING1_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_RING1_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_RING1_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_RING1_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&right_ring1_tap>;
    };
    #define RightRing1Middy right_ring1_middy_bilateral RIGHT_MIDDY_MOD RIGHT_MIDDY_KEY
    #ifndef RIGHT_RING2_MIDDY_HOLDING_TYPE
    #define RIGHT_RING2_MIDDY_HOLDING_TYPE RIGHT_RING2_CHORD_HOLDING_TYPE
    #endif
    #ifndef RIGHT_RING2_MIDDY_HOLDING_TIME
    #define RIGHT_RING2_MIDDY_HOLDING_TIME RIGHT_RING2_CHORD_HOLDING_TIME
    #endif
    #ifndef RIGHT_RING2_MIDDY_STREAK_DECAY
    #define RIGHT_RING2_MIDDY_STREAK_DECAY RIGHT_RING2_CHORD_STREAK_DECAY
    #endif
    #ifndef RIGHT_RING2_MIDDY_REPEAT_DECAY
    #define RIGHT_RING2_MIDDY_REPEAT_DECAY RIGHT_RING2_CHORD_REPEAT_DECAY
    #endif
    right_ring2_middy: homey_right_ring2_middy {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_RING2_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_RING2_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_RING2_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_RING2_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    right_ring2_middy_bilateral: homey_right_ring2_middy_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_RING2_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_RING2_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_RING2_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_RING2_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&right_ring2_tap>;
    };
    #define RightRing2Middy right_ring2_middy_bilateral RIGHT_MIDDY_MOD RIGHT_MIDDY_KEY
    #ifndef RIGHT_INDEX_MIDDY_HOLDING_TYPE
    #define RIGHT_INDEX_MIDDY_HOLDING_TYPE RIGHT_INDEX_CHORD_HOLDING_TYPE
    #endif
    #ifndef RIGHT_INDEX_MIDDY_HOLDING_TIME
    #define RIGHT_INDEX_MIDDY_HOLDING_TIME RIGHT_INDEX_CHORD_HOLDING_TIME
    #endif
    #ifndef RIGHT_INDEX_MIDDY_STREAK_DECAY
    #define RIGHT_INDEX_MIDDY_STREAK_DECAY RIGHT_INDEX_CHORD_STREAK_DECAY
    #endif
    #ifndef RIGHT_INDEX_MIDDY_REPEAT_DECAY
    #define RIGHT_INDEX_MIDDY_REPEAT_DECAY RIGHT_INDEX_CHORD_REPEAT_DECAY
    #endif
    right_index_middy: homey_right_index_middy {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_INDEX_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    right_index_middy_bilateral: homey_right_index_middy_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_INDEX_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&right_index_tap>;
    };
    #define RightIndexMiddy right_index_middy_bilateral RIGHT_MIDDY_MOD RIGHT_MIDDY_KEY
    #ifndef LEFT_PINKY_INDEX_HOLDING_TYPE
    #define LEFT_PINKY_INDEX_HOLDING_TYPE LEFT_PINKY_CHORD_HOLDING_TYPE
    #endif
    #ifndef LEFT_PINKY_INDEX_HOLDING_TIME
    #define LEFT_PINKY_INDEX_HOLDING_TIME LEFT_PINKY_CHORD_HOLDING_TIME
    #endif
    #ifndef LEFT_PINKY_INDEX_STREAK_DECAY
    #define LEFT_PINKY_INDEX_STREAK_DECAY LEFT_PINKY_CHORD_STREAK_DECAY
    #endif
    #ifndef LEFT_PINKY_INDEX_REPEAT_DECAY
    #define LEFT_PINKY_INDEX_REPEAT_DECAY LEFT_PINKY_CHORD_REPEAT_DECAY
    #endif
    left_pinky_index: homey_left_pinky_index {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_PINKY_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
        quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    left_pinky_index_bilateral: homey_left_pinky_index_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_PINKY_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
        quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&left_pinky_tap>;
    };
    #define LeftPinkyIndex left_pinky_index_bilateral LEFT_INDEX_MOD LEFT_INDEX_KEY
    #ifndef LEFT_RING1_INDEX_HOLDING_TYPE
    #define LEFT_RING1_INDEX_HOLDING_TYPE LEFT_RING1_CHORD_HOLDING_TYPE
    #endif
    #ifndef LEFT_RING1_INDEX_HOLDING_TIME
    #define LEFT_RING1_INDEX_HOLDING_TIME LEFT_RING1_CHORD_HOLDING_TIME
    #endif
    #ifndef LEFT_RING1_INDEX_STREAK_DECAY
    #define LEFT_RING1_INDEX_STREAK_DECAY LEFT_RING1_CHORD_STREAK_DECAY
    #endif
    #ifndef LEFT_RING1_INDEX_REPEAT_DECAY
    #define LEFT_RING1_INDEX_REPEAT_DECAY LEFT_RING1_CHORD_REPEAT_DECAY
    #endif
    left_ring1_index: homey_left_ring1_index {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_RING1_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_RING1_HOLDING_TIME>;
        quick-tap-ms = <LEFT_RING1_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_RING1_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    left_ring1_index_bilateral: homey_left_ring1_index_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_RING1_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_RING1_HOLDING_TIME>;
        quick-tap-ms = <LEFT_RING1_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_RING1_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&left_ring1_tap>;
    };
    #define LeftRing1Index left_ring1_index_bilateral LEFT_INDEX_MOD LEFT_INDEX_KEY
    #ifndef LEFT_RING2_INDEX_HOLDING_TYPE
    #define LEFT_RING2_INDEX_HOLDING_TYPE LEFT_RING2_CHORD_HOLDING_TYPE
    #endif
    #ifndef LEFT_RING2_INDEX_HOLDING_TIME
    #define LEFT_RING2_INDEX_HOLDING_TIME LEFT_RING2_CHORD_HOLDING_TIME
    #endif
    #ifndef LEFT_RING2_INDEX_STREAK_DECAY
    #define LEFT_RING2_INDEX_STREAK_DECAY LEFT_RING2_CHORD_STREAK_DECAY
    #endif
    #ifndef LEFT_RING2_INDEX_REPEAT_DECAY
    #define LEFT_RING2_INDEX_REPEAT_DECAY LEFT_RING2_CHORD_REPEAT_DECAY
    #endif
    left_ring2_index: homey_left_ring2_index {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_RING2_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_RING2_HOLDING_TIME>;
        quick-tap-ms = <LEFT_RING2_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_RING2_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    left_ring2_index_bilateral: homey_left_ring2_index_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_RING2_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_RING2_HOLDING_TIME>;
        quick-tap-ms = <LEFT_RING2_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_RING2_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&left_ring2_tap>;
    };
    #define LeftRing2Index left_ring2_index_bilateral LEFT_INDEX_MOD LEFT_INDEX_KEY
    #ifndef LEFT_MIDDY_INDEX_HOLDING_TYPE
    #define LEFT_MIDDY_INDEX_HOLDING_TYPE LEFT_MIDDY_CHORD_HOLDING_TYPE
    #endif
    #ifndef LEFT_MIDDY_INDEX_HOLDING_TIME
    #define LEFT_MIDDY_INDEX_HOLDING_TIME LEFT_MIDDY_CHORD_HOLDING_TIME
    #endif
    #ifndef LEFT_MIDDY_INDEX_STREAK_DECAY
    #define LEFT_MIDDY_INDEX_STREAK_DECAY LEFT_MIDDY_CHORD_STREAK_DECAY
    #endif
    #ifndef LEFT_MIDDY_INDEX_REPEAT_DECAY
    #define LEFT_MIDDY_INDEX_REPEAT_DECAY LEFT_MIDDY_CHORD_REPEAT_DECAY
    #endif
    left_middy_index: homey_left_middy_index {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_MIDDY_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
        quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    left_middy_index_bilateral: homey_left_middy_index_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = LEFT_MIDDY_HOLDING_TYPE;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
        quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
        require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&left_middy_tap>;
    };
    #define LeftMiddyIndex left_middy_index_bilateral LEFT_INDEX_MOD LEFT_INDEX_KEY
    #ifndef RIGHT_PINKY_INDEX_HOLDING_TYPE
    #define RIGHT_PINKY_INDEX_HOLDING_TYPE RIGHT_PINKY_CHORD_HOLDING_TYPE
    #endif
    #ifndef RIGHT_PINKY_INDEX_HOLDING_TIME
    #define RIGHT_PINKY_INDEX_HOLDING_TIME RIGHT_PINKY_CHORD_HOLDING_TIME
    #endif
    #ifndef RIGHT_PINKY_INDEX_STREAK_DECAY
    #define RIGHT_PINKY_INDEX_STREAK_DECAY RIGHT_PINKY_CHORD_STREAK_DECAY
    #endif
    #ifndef RIGHT_PINKY_INDEX_REPEAT_DECAY
    #define RIGHT_PINKY_INDEX_REPEAT_DECAY RIGHT_PINKY_CHORD_REPEAT_DECAY
    #endif
    right_pinky_index: homey_right_pinky_index {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_PINKY_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    right_pinky_index_bilateral: homey_right_pinky_index_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_PINKY_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&right_pinky_tap>;
    };
    #define RightPinkyIndex right_pinky_index_bilateral RIGHT_INDEX_MOD RIGHT_INDEX_KEY
    #ifndef RIGHT_RING1_INDEX_HOLDING_TYPE
    #define RIGHT_RING1_INDEX_HOLDING_TYPE RIGHT_RING1_CHORD_HOLDING_TYPE
    #endif
    #ifndef RIGHT_RING1_INDEX_HOLDING_TIME
    #define RIGHT_RING1_INDEX_HOLDING_TIME RIGHT_RING1_CHORD_HOLDING_TIME
    #endif
    #ifndef RIGHT_RING1_INDEX_STREAK_DECAY
    #define RIGHT_RING1_INDEX_STREAK_DECAY RIGHT_RING1_CHORD_STREAK_DECAY
    #endif
    #ifndef RIGHT_RING1_INDEX_REPEAT_DECAY
    #define RIGHT_RING1_INDEX_REPEAT_DECAY RIGHT_RING1_CHORD_REPEAT_DECAY
    #endif
    right_ring1_index: homey_right_ring1_index {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_RING1_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_RING1_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_RING1_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_RING1_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    right_ring1_index_bilateral: homey_right_ring1_index_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_RING1_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_RING1_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_RING1_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_RING1_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&right_ring1_tap>;
    };
    #define RightRing1Index right_ring1_index_bilateral RIGHT_INDEX_MOD RIGHT_INDEX_KEY
    #ifndef RIGHT_RING2_INDEX_HOLDING_TYPE
    #define RIGHT_RING2_INDEX_HOLDING_TYPE RIGHT_RING2_CHORD_HOLDING_TYPE
    #endif
    #ifndef RIGHT_RING2_INDEX_HOLDING_TIME
    #define RIGHT_RING2_INDEX_HOLDING_TIME RIGHT_RING2_CHORD_HOLDING_TIME
    #endif
    #ifndef RIGHT_RING2_INDEX_STREAK_DECAY
    #define RIGHT_RING2_INDEX_STREAK_DECAY RIGHT_RING2_CHORD_STREAK_DECAY
    #endif
    #ifndef RIGHT_RING2_INDEX_REPEAT_DECAY
    #define RIGHT_RING2_INDEX_REPEAT_DECAY RIGHT_RING2_CHORD_REPEAT_DECAY
    #endif
    right_ring2_index: homey_right_ring2_index {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_RING2_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_RING2_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_RING2_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_RING2_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    right_ring2_index_bilateral: homey_right_ring2_index_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_RING2_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_RING2_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_RING2_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_RING2_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&right_ring2_tap>;
    };
    #define RightRing2Index right_ring2_index_bilateral RIGHT_INDEX_MOD RIGHT_INDEX_KEY
    #ifndef RIGHT_MIDDY_INDEX_HOLDING_TYPE
    #define RIGHT_MIDDY_INDEX_HOLDING_TYPE RIGHT_MIDDY_CHORD_HOLDING_TYPE
    #endif
    #ifndef RIGHT_MIDDY_INDEX_HOLDING_TIME
    #define RIGHT_MIDDY_INDEX_HOLDING_TIME RIGHT_MIDDY_CHORD_HOLDING_TIME
    #endif
    #ifndef RIGHT_MIDDY_INDEX_STREAK_DECAY
    #define RIGHT_MIDDY_INDEX_STREAK_DECAY RIGHT_MIDDY_CHORD_STREAK_DECAY
    #endif
    #ifndef RIGHT_MIDDY_INDEX_REPEAT_DECAY
    #define RIGHT_MIDDY_INDEX_REPEAT_DECAY RIGHT_MIDDY_CHORD_REPEAT_DECAY
    #endif
    right_middy_index: homey_right_middy_index {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_MIDDY_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    right_middy_index_bilateral: homey_right_middy_index_bilateral {
        compatible = "zmk,behavior-hold-tap";
        flavor = RIGHT_MIDDY_HOLDING_TYPE;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
        quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
        require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&kp>, <&right_middy_tap>;
    };
    #define RightMiddyIndex right_middy_index_bilateral RIGHT_INDEX_MOD RIGHT_INDEX_KEY

    //
    // Key repetition access keys on the index fingers
    //
    plain: plain_typing_layer {
        compatible = "zmk,behavior-hold-tap";
        flavor = PLAIN_HOLDING_TYPE;
        tapping-term-ms = <PLAIN_HOLDING_TIME>;
        quick-tap-ms = <PLAIN_REPEAT_DECAY>; // enable repeat
        require-prior-idle-ms = <PLAIN_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&mo>, <&kp>;
        retro-tap; // tap on standalone hold
    };
    plain_engram_COMMA: plain_typing_layer_engram_COMMA {
        compatible = "zmk,behavior-hold-tap";
        flavor = PLAIN_HOLDING_TYPE;
        tapping-term-ms = <PLAIN_HOLDING_TIME>;
        quick-tap-ms = <PLAIN_REPEAT_DECAY>; // enable repeat
        require-prior-idle-ms = <PLAIN_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&mo>, <&engram_COMMA>;
        retro-tap; // tap on standalone hold
    };
    plain_engram_DOT: plain_typing_layer_engram_DOT {
        compatible = "zmk,behavior-hold-tap";
        flavor = PLAIN_HOLDING_TYPE;
        tapping-term-ms = <PLAIN_HOLDING_TIME>;
        quick-tap-ms = <PLAIN_REPEAT_DECAY>; // enable repeat
        require-prior-idle-ms = <PLAIN_STREAK_DECAY>;
        #binding-cells = <2>;
        bindings = <&mo>, <&engram_DOT>;
        retro-tap; // tap on standalone hold
    };

    //
    // Thumb cluster hold-tap keys for Miryoku layers
    //
    thumb: thumb_layer_access {
        compatible = "zmk,behavior-hold-tap";
        flavor = THUMB_HOLDING_TYPE;
        tapping-term-ms = <THUMB_HOLDING_TIME>;
        quick-tap-ms = <THUMB_REPEAT_DECAY>; // enable repeat
        #binding-cells = <2>;
        bindings = <&mo>, <&kp>;
    };
    thumb_parang_left: thumb_layer_access_parang_left {
        compatible = "zmk,behavior-hold-tap";
        flavor = THUMB_HOLDING_TYPE;
        tapping-term-ms = <THUMB_HOLDING_TIME>;
        quick-tap-ms = <THUMB_REPEAT_DECAY>; // enable repeat
        #binding-cells = <2>;
        bindings = <&mo>, <&parang_left>;
    };
    thumb_lower_shift: lower_layer_or_sticky_shift {
        compatible = "zmk,behavior-hold-tap";
        flavor = "tap-preferred";
        tapping-term-ms = <THUMB_HOLDING_TIME>;
        #binding-cells = <2>;
        bindings = <&mo>, <&sticky_key_oneshot>;
    };
    space: thumb_layer_access_spacebar {
        compatible = "zmk,behavior-hold-tap";
        flavor = SPACE_HOLDING_TYPE;
        tapping-term-ms = <SPACE_HOLDING_TIME>;
        quick-tap-ms = <SPACE_REPEAT_DECAY>; // enable repeat
        #binding-cells = <2>;
        bindings = <&mo>, <&kp>;
    };

    //
    // Shift + LEFT_PARENTHESIS = LESS_THAN
    //
    parang_left: left_parenthesis_and_less_than {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp LPAR>, <&kp LT>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    //
    // Shift + RIGHT_PARENTHESIS = GREATER_THAN
    //
    parang_right: right_parenthesis_and_greater_than {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp RPAR>, <&kp GT>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    //
    // Custom shifted pairs for the Engram layout
    // - https://engram.dev/
    // - https://sunaku.github.io/engram-keyboard-layout.html
    //
    engram_N1: engram_shift_N1_PIPE {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp N1>, <&kp PIPE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_N2: engram_shift_N2_EQUAL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp N2>, <&kp EQUAL>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_N3: engram_shift_N3_TILDE {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp N3>, <&kp TILDE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_N4: engram_shift_N4_PLUS {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp N4>, <&kp PLUS>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_N5: engram_shift_N5_LT {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp N5>, <&kp LT>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_N6: engram_shift_N6_GT {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp N6>, <&kp GT>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_N7: engram_shift_N7_CARET {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp N7>, <&kp CARET>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_N8: engram_shift_N8_AMPS {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp N8>, <&kp AMPS>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_N9: engram_shift_N9_PRCNT {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp N9>, <&kp PRCNT>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_N0: engram_shift_N0_STAR {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp N0>, <&kp STAR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_SQT: engram_shift_SQT_LPAR {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp SQT>, <&kp LPAR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_DQT: engram_shift_DQT_RPAR {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp DQT>, <&kp RPAR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_COMMA: engram_shift_COMMA_SEMI {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp COMMA>, <&kp SEMI>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_DOT: engram_shift_DOT_COLON {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp DOT>, <&kp COLON>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_QMARK: engram_shift_QMARK_EXCL {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp QMARK>, <&kp EXCL>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_HASH: engram_shift_HASH_DLLR {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp HASH>, <&kp DLLR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_AT: engram_shift_AT_GRAVE {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp AT>, <&kp GRAVE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    engram_FSLH: engram_shift_FSLH_BSLH {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp FSLH>, <&kp BSLH>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    //////////////////////////////////////////////////////////////////////////
    //
    // &sk (sticky key) variant that is truly one-shot
    //
    //////////////////////////////////////////////////////////////////////////

    //
    // STICKY_1SHOT_DECAY defines how much time you have left (milliseconds)
    // after tapping a sticky key before it expires (won't apply to next tap).
    //
    #ifndef STICKY_1SHOT_DECAY
    #define STICKY_1SHOT_DECAY 500
    #endif

    //
    // STICKY_HOLDING_TIME defines how long you need to hold (milliseconds)
    // sticky one-shot keys in order to trigger their hold (not tap) action.
    //
    #ifndef STICKY_HOLDING_TIME
    #define STICKY_HOLDING_TIME CHORD_HOLDING_TIME
    #endif

    sticky_key_modtap: sticky_key_modtap {
        compatible = "zmk,behavior-hold-tap";
        flavor = "tap-preferred";
        tapping-term-ms = <STICKY_HOLDING_TIME>;
        #binding-cells = <2>;
        bindings = <&kp>, <&sticky_key_oneshot>;
    };
    sticky_key_oneshot: sticky_key_oneshot_macro {
        compatible = "zmk,behavior-macro-one-param";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <1>;
        bindings
            = <&macro_param_1to1>
            , <&macro_tap &sticky_key_quickrel MACRO_PLACEHOLDER>
            ;
    };
    sticky_key_quickrel: sticky_key_quick_release {
        compatible = "zmk,behavior-sticky-key";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <STICKY_1SHOT_DECAY>;
        quick-release;
        ignore-modifiers;
    };

    //////////////////////////////////////////////////////////////////////////
    //
    // ZMK global overrides
    //
    //////////////////////////////////////////////////////////////////////////

    //
    // CapsWord - ported from Pascal Getreuer's extension for QMK
    // - https://zmk.dev/docs/behaviors/caps-word
    // - https://getreuer.info/posts/keyboards/caps-word/index.html
    //
    behavior_caps_word {
        continue-list = <
            UNDERSCORE MINUS
            BACKSPACE DELETE
            N1 N2 N3 N4 N5 N6 N7 N8 N9 N0
        >;

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <30 32 41 42 43 31 44>;
        };

        hm_shft: hm_shft {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_SHFT";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <200>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <59>;
        };

        snake_case: snake_case {
            compatible = "zmk,behavior-mod-morph";
            label = "SNAKE_CASE";
            bindings = <&kp SPACE>, <&kp UNDER>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };
    };

    macros {
        mac_eol: mac_eol {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp LEFT_GUI>;

            label = "MAC_EOL";
        };

        mac_sol: mac_sol {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp LEFT>,
                <&macro_release>,
                <&kp LEFT_GUI>;

            label = "MAC_SOL";
        };

        sql_ssf: sql_ssf {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp S &kp E &kp L &kp E &kp C &kp T &kp SPACE &kp STAR &kp SPACE &kp F &kp R &kp O &kp M &kp SPACE>;

            label = "SQL_SSF";
        };

        mac_toggle: mac_toggle {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&out OUT_BLE &bt BT_SEL 1 &to 1>;

            label = "MAC_TOGGLE";
        };

        win_toggle: win_toggle {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&out OUT_USB &to 0>;

            label = "WIN_TOGGLE";
        };

        sql_dist: sql_dist {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LS(S) &kp LS(E) &kp LS(L) &kp LS(E) &kp LS(C) &kp LS(T) &kp SPACE &kp LS(D) &kp LS(I) &kp LS(S) &kp LS(T) &kp LS(I) &kp LS(N) &kp LS(C) &kp LS(T) &kp SPACE>;

            label = "SQL_DIST";
        };
    };

    combos {
        compatible = "zmk,combos";

        c_home {
            bindings = <&kp HOME>;
            key-positions = <41 32>;
            layers = <0>;
        };

        c_end {
            bindings = <&kp END>;
            key-positions = <43 32>;
            layers = <0>;
        };

        c_sublime_replace {
            bindings = <&kp LC(H)>;
            key-positions = <18 35>;
        };

        mac_c_home {
            bindings = <&mac_sol>;
            key-positions = <41 32>;
            layers = <1 3>;
        };

        mac_c_end {
            bindings = <&mac_eol>;
            key-positions = <32 43>;
            layers = <1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESCAPE      &kp N1     &kp N2          &kp N3              &kp N4            &kp N5  &tog 6                                                        &mo 5        &kp N6  &kp N7             &kp N8               &kp N9           &kp N0              &kp MINUS
&kp TAB         &kp Q      &kp W           &kp E               &kp R             &kp T   &to 1                                                         &none        &kp Y   &kp U              &kp I                &kp O            &kp P               &kp BSLH
&mo 2           &kp A      &hm LEFT_ALT S  &hm LEFT_CONTROL D  &hm LEFT_SHIFT F  &kp G   &mac_toggle  &kp LCTRL  &kp ENTER      &kp LGUI   &kp ESC     &kp MINUS    &kp H   &hm RIGHT_SHIFT J  &hm RIGHT_CONTROL K  &hm RIGHT_ALT L  &hm RIGHT_GUI SEMI  &kp SQT
&kp LEFT_SHIFT  &kp Z      &kp X           &kp C               &kp V             &kp B                           &kp HOME       &kp PG_UP                           &kp N   &kp M              &kp COMMA            &kp DOT          &kp FSLH            &kp EQUAL
&mo 4           &kp SPACE  &kp GRAVE       &kp LEFT            &kp RIGHT                 &kp BSPC     &kp DEL    &kp END        &kp PG_DN  &kp RETURN  &snake_case          &kp UP             &kp DOWN             &kp LBKT         &kp RBKT            &hm RIGHT_SHIFT CAPSLOCK
            >;
        };

        mac_osx {
            bindings = <
&kp ESCAPE      &kp N1     &kp N2          &kp N3          &kp N4            &kp N5  &tog 6                                                          &mo 5        &kp N6  &kp N7             &kp N8          &kp N9           &kp N0                  &kp MINUS
&kp TAB         &kp Q      &kp W           &kp E           &kp R             &kp T   &to 0                                                           &none        &kp Y   &kp U              &kp I           &kp O            &kp P                   &kp BSLH
&mo 3           &kp A      &hm LEFT_ALT S  &hm LEFT_GUI D  &hm LEFT_SHIFT F  &kp G   &win_toggle  &kp LEFT_GUI  &kp ENTER      &kp LGUI   &kp RCTRL  &kp MINUS    &kp H   &hm RIGHT_SHIFT J  &hm LEFT_GUI K  &hm RIGHT_ALT L  &hm RIGHT_CONTROL SEMI  &kp SQT
&kp LEFT_SHIFT  &kp Z      &kp X           &kp C           &kp V             &kp B                              &mac_sol       &kp PG_UP                          &kp N   &kp M              &kp COMMA       &kp DOT          &kp FSLH                &kp EQUAL
&mo 4           &kp SPACE  &kp GRAVE       &kp LEFT        &kp RIGHT                 &kp BSPC     &kp DEL       &mac_eol       &kp PG_DN  &kp ENTER  &snake_case          &kp UP             &kp DOWN        &kp LBKT         &kp RBKT                &hm RIGHT_SHIFT CAPSLOCK
            >;
        };

        layer_keypad {
            bindings = <
&kp ESCAPE           &kp N1            &kp N2             &kp N3                &kp N4                      &kp N5  &trans                                                     &mo 5      &kp N6  &kp NUMBER_7  &kp N8          &kp N9         &kp N0         &kp MINUS
&kp TAB              &none             &none              &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS       &none   &none                                                      &none      &none   &kp HOME      &kp UP_ARROW    &kp END        &none          &kp BACKSLASH
&trans               &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE        &hm LEFT_SHIFT RIGHT_BRACE  &none   &none     &kp LCTRL  &kp ENTER      &kp LGUI   &kp RCTRL   &none      &none   &kp LEFT      &kp DOWN_ARROW  &kp RIGHT      &kp SEMICOLON  &kp SQT
&hm_shft LSHFT CAPS  &kp Z             &none              &kp C                 &kp V                       &none                        &kp HOME       &kp PG_UP                         &none   &kp PAGE_UP   &none           &kp PAGE_DOWN  &kp SLASH      &hm_shft RSHFT CAPS
&mo 4                &kp EQUAL         &kp INSERT         &kp LEFT              &kp RIGHT                           &kp BSPC  &kp DEL    &kp END        &kp PG_DN  &kp RETURN  &kp SPACE          &kp UP        &kp DOWN        &none          &none          &mo 4
            >;
        };

        layer_kp_mac {
            bindings = <
&kp ESCAPE  &kp N1            &kp N2             &kp N3                &kp N4                      &kp N5  &trans                                                       &mo 5      &kp N6  &kp NUMBER_7  &kp N8          &kp N9     &kp N0         &kp MINUS
&kp TAB     &none             &none              &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS       &none   &none                                                        &none      &none   &mac_sol      &kp UP_ARROW    &mac_eol   &none          &kp BACKSLASH
&trans      &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE        &hm LEFT_SHIFT RIGHT_BRACE  &none   &none     &kp LEFT_GUI  &kp ENTER      &kp LGUI   &kp RCTRL  &none      &none   &kp LEFT      &kp DOWN_ARROW  &kp RIGHT  &kp SEMICOLON  &kp SQT
&kp LSHFT   &kp Z             &none              &kp C                 &kp V                       &none                           &mac_sol       &kp PG_UP                        &none   &kp PG_UP     &none           &kp PG_DN  &kp SLASH      &hm_shft RSHFT CAPS
&mo 4       &kp EQUAL         &kp INSERT         &kp LEFT              &kp RIGHT                           &kp BSPC  &kp DEL       &mac_eol       &kp PG_DN  &kp ENTER  &kp SPACE          &kp UP        &kp DOWN        &none      &none          &mo 4
            >;
        };

        layer_fn {
            bindings = <
&kp F1  &kp F2  &kp F3    &kp F4     &kp F5   &kp F6  &tog 2                                      &mo 5   &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &trans    &trans     &trans   &trans  &none                                       &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &sql_ssf  &sql_dist  &trans   &trans  &none   &trans  &trans      &trans  &trans  &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans    &trans     &trans   &trans                  &trans      &trans                  &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans    &kp HOME   &kp END          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
&out OUT_TOG  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none         &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none         &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none         &none         &none         &none         &none         &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none         &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        num_keys {
            bindings = <
&kp ESCAPE  &kp N1            &kp N2             &kp N3                &kp N4                      &kp N5  &trans                                                    &mo 5            &kp N6  &kp KP_NUMLOCK   &kp EQUAL        &kp KP_DIVIDE    &kp ASTERISK  &kp MINUS
&kp TAB     &none             &none              &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS       &none   &none                                                     &none            &none   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp MINUS     &kp BACKSLASH
&trans      &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE        &hm LEFT_SHIFT RIGHT_BRACE  &none   &none     &kp LCTRL  &kp ENTER      &kp LGUI   &kp RCTRL  &none            &none   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp PLUS      &kp SQT
&kp LSHFT   &none             &none              &none                 &none                       &none                        &kp HOME       &kp PG_UP                              &none   &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_ENTER  &kp RSHFT
&mo 4       &kp EQUAL         &kp INSERT         &kp LEFT              &kp RIGHT                           &kp BSPC  &kp DEL    &kp END        &kp PG_DN  &kp ENTER  &kp KP_NUMBER_0          &kp UP           &kp DOWN         &kp DOT          &none         &mo 4
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
